This project tests hash table performance across 3 different languages:
  C++, Java, and Python (including Cython).

For C++, the STL's unordered_map is used.
For Java, the java.util.HashMap class is used.
For Python, the dict type is used.

Each test repeatedly generates numbers between zero and 9999 and puts these into a hash table.
Another random number is then retrieved from the hash table.
This is repeated for one billion iterations.
There is a warm-up period of one hundred million iterations before the main test.

Note that the test makes no attempt to isolate hash table performance from the other parts of the test,
so it also tests the performance of loop iteration, and some integer arithmetic.

My assumption when designing the tests was that loop iteration and integer arithmetic would be cheap
compared to the hash table operations.
However this does not appear to be the case for some languages (like Python, for example).
