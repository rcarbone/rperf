/*
 * C doubly linked list implementation
 *
 * Copyright (c) 2010 TJ Holowaychuk <tj@vision-media.ca>
 */


/*
 * Typedefs:
 *  list_t
 *  list_node_t
 *  list_iterator_t
 *  list_direction_t
 */


/* Constructor/Destructor (2) + (1) */

/* Allocate a new list_t. NULL on failure */
list_t * list_new (void);

/* Free the list */
void list_destroy (list_t * self);

/* Allocates a new list_node_t. NULL on failure */
list_node_t * list_node_new (void * val);


/* Insert (2) */

/* Append the given node to the list and return the node, NULL on failure (tail) */
list_node_t * list_rpush (list_t * self, list_node_t * node);

/* Prepend the given node to the list and return the node, NULL on failure (head) */
list_node_t * list_lpush (list_t * self, list_node_t * node);


/* Remove (3) */

/* Return / detach the last node in the list, or NULL (tail) */
list_node_t * list_rpop (list_t * self);

/* Return / detach the first node in the list, or NULL (head) */
list_node_t * list_lpop (list_t * self);

/* Remove the given node from the list, freeing it and it's value */
void list_remove (list_t * self, list_node_t * node);


/* Access (2) */

/* Return the node associated to val or NULL */
list_node_t * list_find (list_t * self, void * val);

/* Return the node at the given index or NULL */
list_node_t * list_at (list_t * self, int index);


/* Iterators (4) */
/* Accept a direction, which may be LIST_HEAD or LIST_TAIL */

/* Allocate a new list_iterator_t. NULL on failure.
list_iterator_t * list_iterator_new (list_t * list, list_direction_t direction);

/* Allocate a new list_iterator_t with the given start node. NULL on failure */
list_iterator_t * list_iterator_new_from_node (list_node_t * node, list_direction_t direction);

/* Return the next list_node_t or NULL when no more nodes remain in the list */
list_node_t * list_iterator_next (list_iterator_t * self);

/* Free the list iterator */
void list_iterator_destroy (list_iterator_t * self);
