NAME
       hat-trie - an implementation of the HAT-trie data structure

AUTHOR
       Copyright (c) 2011 by Daniel C. Jones <dcjones@cs.washington.edu>

SYNOPSIS
       #include "hat-trie.h"

TYPEDEFS
       typedef struct hattrie_t_ hattrie_t;
       typedef struct hattrie_iter_t_ hattrie_iter_t;

NAME
       - Create an empty hat-trie
         hattrie_t * hattrie_create (void);

       - Free all memory used by a trie
         void hattrie_free (hattrie_t * T);

       - Remove all entries */
         void hattrie_clear (hattrie_t * T);

       - Number of stored keys
         size_t hattrie_size (const hattrie_t * T);

       - Memory used in structure in bytes
         size_t hattrie_sizeof (const hattrie_t * T);

       - Find the given key in the trie, inserting it if it does not exist, and returning a pointer to it's key
         value_t * hattrie_get (hattrie_t *, const char * key, size_t len);

       - Find a given key in the table, returning a NULL pointer if it does not exist
         value_t * hattrie_tryget (hattrie_t *, const char * key, size_t len);

       - Delete a given key from trie. Returns 0 if successful or -1 if not found
         int hattrie_del (hattrie_t * T, const char * key, size_t len);

         hattrie_iter_t * hattrie_iter_begin (const hattrie_t * T, bool sorted);
         void hattrie_iter_next (hattrie_iter_t * it);
         bool hattrie_iter_finished (hattrie_iter_t * it);
         void hattrie_iter_free (hattrie_iter_t * it);
         const char * hattrie_iter_key (hattrie_iter_t *, size_t * len);
         value_t * hattrie_iter_val (hattrie_iter_t *);

       - Return true if two iterators are equal
         bool hattrie_iter_equal (const hattrie_iter_t * a, const hattrie_iter_t * b);
