NAME
       treap interface - Copyright (c) 2001-2014, Farooq Mela All rights reserved.

AUTHOR
       Copyright (c) 2001-2014, Farooq Mela All rights reserved.

SYNOPSIS
       #include "tr_tree.h"

TYPEDEFS
       typedef struct tr_tree tr_tree;
       typedef struct tr_itor tr_itor;

NAME
       - Initializes the tree
         tr_tree * tr_tree_new (dict_compare_func compare_func, dict_prio_func prio_func);

       - Terminates the tree
         size_t tr_tree_free (tr_tree * tree, dict_delete_func delete_func);

       - Inserts an element in the tree
         dict_insert_result tr_tree_insert (tr_tree * tree, void * key);

       - Searches an element in the tree
         void ** tr_tree_search (tr_tree * tree, const void * key);

       - Removes an element from the tree
         dict_remove_result tr_tree_remove (tr_tree * tree, const void * key);

       - Gets the number of elements
         size_t tr_tree_count (const tr_tree * tree);

       - Gets the number of elements
         size_t tr_tree_clear (tr_tree * tree, dict_delete_func delete_func);

         size_t tr_tree_traverse (tr_tree * tree, dict_visit_func visit, void * user_data);

         void ** tr_tree_search_le (tr_tree * tree, const void * key);
         void ** tr_tree_search_lt (tr_tree * tree, const void * key);
         void ** tr_tree_search_ge (tr_tree * tree, const void * key);
         void ** tr_tree_search_gt (tr_tree * tree, const void * key);

         size_t tr_tree_min_path_length (const tr_tree * tree);
         size_t tr_tree_max_path_length (const tr_tree * tree);
         size_t tr_tree_total_path_length (const tr_tree * tree);
         bool tr_tree_verify (const tr_tree* tree);

         bool tr_tree_select (tr_tree * tree, size_t n, const void ** key, void ** datum);

         tr_itor * tr_itor_new (tr_tree * tree);
         void tr_itor_free (tr_itor * tree);

         bool tr_itor_valid (const tr_itor * itor);
         void tr_itor_invalidate (tr_itor * itor);
         bool tr_itor_next (tr_itor * itor);
         bool tr_itor_prev (tr_itor * itor);
         bool tr_itor_nextn (tr_itor * itor, size_t count);
         bool tr_itor_prevn (tr_itor * itor, size_t count);
         bool tr_itor_first (tr_itor * itor);
         bool tr_itor_last (tr_itor * itor);
         bool tr_itor_search (tr_itor * itor, const void * key);
         bool tr_itor_search_le (tr_itor * itor, const void * key);
         bool tr_itor_search_lt (tr_itor * itor, const void * key);
         bool tr_itor_search_ge (tr_itor * itor, const void * key);
         bool tr_itor_search_gt (tr_itor * itor, const void * key);
         const void * tr_itor_key (const tr_itor * itor);
         void ** tr_itor_datum (tr_itor * itor);
         int tr_itor_compare (const tr_itor * i1, const tr_itor * i2);
         bool tr_itor_remove (tr_itor * itor);
