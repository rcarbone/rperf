Linux tar 3.2.0-4-686-pae #1 SMP Debian 3.2.63-2 i686

Running test [grow]. Please wait ...
  battle for 33: oddou::hashmap too slow                                    
  battle for 32: google::sparsehash too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: std::unordered_map too slow                                    
  battle for 26: boost::unordered_map too slow                                    
  battle for 25: google/c-sparse too slow                                    
  battle for 24: amtl::hashmap too slow                                    
  battle for 23: calg/hashtable too slow                                    
  battle for 22: python/hashtable too slow                                    
  battle for 21: libCDS/HashMap too slow                                    
  battle for 20: libcfu/hashtable too slow                                    
  battle for 19: apr-no-pool/hashtable too slow                                    
  battle for 18: klib/khash too slow                                    
  battle for 17: apr/hashtable too slow                                    
  battle for 16: google/c-dense too slow                                    
  battle for 15: ulib/open-hash too slow                                    
  battle for 14: tommyds/dynamic too slow                                    
  battle for 13: uthash/hashtable too slow                                    
  battle for 12: rdestl::hash_map too slow                                    
  battle for 11: clark/hashtable too slow                                    
  battle for 10: tommyds/linear too slow                                    
  battle for  9: hashit/chain too slow                                    
  battle for  8: ulib::chain-hash++ too slow                                    
  battle for  7: libevent/ht too slow                                    
  battle for  6: ulib::open-hash++ too slow                                    
  battle for  5: hashit/overflow too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: hashit/open too slow                                    
  battle for  2: glib/ghash too slow                                    
  winner is   1: gcc/hashtab

Results of test [grow] - 1e4 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: gcc/hashtab              20.022  /    2.869  /   27.254    -     100.1 ms
   2: glib/ghash               30.949  /   16.072  /   48.654    -     154.8 ms
   3: hashit/open              33.047  /   27.891  /   45.480    -     165.3 ms
   4: ulib/chain-hash          33.134  /   20.373  /   48.723    -     165.7 ms
   5: hashit/overflow          33.765  /    8.288  /   52.179    -     168.9 ms
   6: ulib::open-hash++        35.402  /   24.497  /   57.464    -     177.0 ms
   7: libevent/ht              36.185  /   10.361  /   61.978    -     181.0 ms
   8: ulib::chain-hash++       37.535  /   31.069  /   42.799    -     187.7 ms
   9: hashit/chain             39.144  /   21.189  /   57.401    -     195.8 ms
  10: tommyds/linear           46.617  /   39.382  /   50.972    -     233.1 ms
  11: clark/hashtable          49.697  /   26.672  /   81.363    -     248.5 ms
  12: rdestl::hash_map         54.278  /   40.667  /   67.053    -     271.4 ms
  13: uthash/hashtable         58.875  /   38.846  /   77.722    -     294.4 ms
  14: tommyds/dynamic          60.416  /   45.399  /   68.544    -     302.1 ms
  15: ulib/open-hash           59.348  /   43.937  /   72.893    -     296.8 ms
  16: google/c-dense           59.815  /   41.890  /   71.285    -     299.1 ms
  17: apr/hashtable            60.590  /   40.576  /   78.230    -     303.0 ms
  18: klib/khash               60.624  /   47.556  /   79.054    -     303.1 ms
  19: apr-no-pool/hashtable    67.176  /   58.552  /   75.653    -     335.9 ms
  20: libcfu/hashtable         73.479  /   63.993  /   91.263    -     377.1 ms
  21: libCDS/HashMap           75.761  /   68.034  /   87.120    -     378.8 ms
  22: python/hashtable         76.837  /   54.136  /   93.645    -     384.2 ms
  23: calg/hashtable           78.914  /   56.726  /  101.161    -     394.6 ms
  24: amtl::hashmap            82.130  /   69.836  /   90.643    -     410.7 ms
  25: google/c-sparse          99.308  /   96.426  /  102.913    -     496.6 ms
  26: boost::unordered_map    114.592  /   93.812  /  131.644    -     573.0 ms
  27: std::unordered_map      126.056  /  102.727  /  141.075    -     630.3 ms
  28: mct::closed_hash_map    138.005  /  118.479  /  154.619    -     690.1 ms
  29: mct::linked_hash_map    156.520  /  152.253  /  164.015    -     782.6 ms
  30: rigtorp::hashmap        176.414  /  168.396  /  186.695    -     882.1 ms
  31: google::densehash       248.621  /  230.524  /  256.033    -       1.2 s 
  32: google::sparsehash      575.049  /  566.578  /  599.623    -       2.8 s 
  33: oddou::hashmap          803.374  /  785.462  /  816.525    -       4.0 s 

Running test [hit]. Please wait ...
  battle for 33: oddou::hashmap too slow                                    
  battle for 32: google::sparsehash too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: std::unordered_map too slow                                    
  battle for 26: boost::unordered_map too slow                                    
  battle for 25: google/c-sparse too slow                                    
  battle for 24: amtl::hashmap too slow                                    
  battle for 23: libcfu/hashtable too slow                                    
  battle for 22: calg/hashtable too slow                                    
  battle for 21: python/hashtable too slow                                    
  battle for 20: libCDS/HashMap too slow                                    
  battle for 19: ulib/open-hash too slow                                    
  battle for 18: uthash/hashtable too slow                                    
  battle for 17: klib/khash too slow                                    
  battle for 16: rdestl::hash_map too slow                                    
  battle for 15: apr-no-pool/hashtable too slow                                    
  battle for 14: google/c-dense too slow                                    
  battle for 13: apr/hashtable too slow                                    
  battle for 12: clark/hashtable too slow                                    
  battle for 11: tommyds/dynamic too slow                                    
  battle for 10: tommyds/linear too slow                                    
  battle for  9: hashit/chain too slow                                    
  battle for  8: hashit/overflow too slow                                    
  battle for  7: hashit/open too slow                                    
  battle for  6: libevent/ht too slow                                    
  battle for  5: ulib::chain-hash++ too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: ulib::open-hash++ too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: glib/ghash

Results of test [hit] - 1e4 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash               45.411  /   33.922  /   56.537    -     227.1 ms
   2: gcc/hashtab              46.355  /   30.238  /   58.581    -     231.8 ms
   3: ulib::open-hash++        55.249  /   30.930  /   63.693    -     276.3 ms
   4: ulib/chain-hash          57.360  /   41.463  /   71.375    -     286.8 ms
   5: ulib::chain-hash++       54.473  /   44.189  /   73.687    -     272.4 ms
   6: libevent/ht              59.998  /   44.679  /   66.488    -     300.0 ms
   7: hashit/open              67.067  /   59.903  /   75.195    -     335.4 ms
   8: hashit/overflow          63.642  /   44.544  /   79.369    -     318.2 ms
   9: hashit/chain             69.439  /   52.568  /   86.927    -     347.2 ms
  10: tommyds/linear           69.176  /   61.199  /   81.088    -     345.9 ms
  11: tommyds/dynamic          74.997  /   54.797  /   83.206    -     375.0 ms
  12: clark/hashtable          74.956  /   54.310  /   93.873    -     374.8 ms
  13: apr/hashtable            80.369  /   68.515  /   86.697    -     401.9 ms
  14: google/c-dense           84.830  /   65.075  /   96.077    -     424.2 ms
  15: apr-no-pool/hashtable    86.479  /   66.604  /  105.607    -     432.4 ms
  16: rdestl::hash_map         91.492  /   77.719  /  100.173    -     457.5 ms
  17: klib/khash               88.949  /   72.136  /  103.511    -     444.8 ms
  18: uthash/hashtable         92.267  /   77.458  /  105.008    -     461.4 ms
  19: ulib/open-hash           90.574  /   86.415  /   96.434    -     452.9 ms
  20: libCDS/HashMap           93.240  /   82.220  /  107.085    -     466.2 ms
  21: python/hashtable         96.888  /   84.077  /  108.102    -     484.5 ms
  22: calg/hashtable          103.140  /   85.659  /  111.444    -     515.7 ms
  23: libcfu/hashtable        108.231  /   82.495  /  123.373    -     541.2 ms
  24: amtl::hashmap           114.502  /  100.769  /  126.631    -     572.5 ms
  25: google/c-sparse         129.493  /  109.467  /  143.138    -     647.5 ms
  26: boost::unordered_map    156.923  /  134.153  /  185.643    -     784.7 ms
  27: std::unordered_map      165.493  /  155.992  /  177.419    -     827.5 ms
  28: mct::closed_hash_map    177.303  /  166.060  /  198.048    -     886.5 ms
  29: mct::linked_hash_map    187.755  /  163.685  /  210.177    -     974.9 ms
  30: rigtorp::hashmap        221.257  /  211.503  /  230.509    -       1.1 s 
  31: google::densehash       348.562  /  313.706  /  404.931    -       1.7 s 
  32: google::sparsehash      815.434  /  794.987  /  844.925    -       4.0 s 
  33: oddou::hashmap          915.388  /  901.649  /  927.760    -       4.5 s 

Running test [miss]. Please wait ...
  battle for 33: oddou::hashmap too slow                                    
  battle for 32: google::sparsehash too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: std::unordered_map too slow                                    
  battle for 26: boost::unordered_map too slow                                    
  battle for 25: google/c-sparse too slow                                    
  battle for 24: amtl::hashmap too slow                                    
  battle for 23: ulib/open-hash too slow                                    
  battle for 22: uthash/hashtable too slow                                    
  battle for 21: klib/khash too slow                                    
  battle for 20: libcfu/hashtable too slow                                    
  battle for 19: calg/hashtable too slow                                    
  battle for 18: python/hashtable too slow                                    
  battle for 17: libCDS/HashMap too slow                                    
  battle for 16: hashit/open too slow                                    
  battle for 15: apr-no-pool/hashtable too slow                                    
  battle for 14: rdestl::hash_map too slow                                    
  battle for 13: google/c-dense too slow                                    
  battle for 12: apr/hashtable too slow                                    
  battle for 11: clark/hashtable too slow                                    
  battle for 10: tommyds/dynamic too slow                                    
  battle for  9: hashit/chain too slow                                    
  battle for  8: libevent/ht too slow                                    
  battle for  7: tommyds/linear too slow                                    
  battle for  6: hashit/overflow too slow                                    
  battle for  5: ulib/chain-hash too slow                                    
  battle for  4: ulib::chain-hash++ too slow                                    
  battle for  3: ulib::open-hash++ too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: glib/ghash

Results of test [miss] - 1e4 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash               50.154  /   44.249  /   52.347    -     250.8 ms
   2: gcc/hashtab              50.410  /   31.023  /   66.287    -     252.1 ms
   3: ulib::open-hash++        56.163  /   42.772  /   62.150    -     280.8 ms
   4: ulib::chain-hash++       56.813  /   43.110  /   64.444    -     284.1 ms
   5: ulib/chain-hash          60.076  /   51.964  /   68.796    -     300.4 ms
   6: hashit/overflow          68.822  /   56.144  /   77.397    -     344.1 ms
   7: tommyds/linear           74.881  /   57.810  /   93.670    -     374.4 ms
   8: libevent/ht              73.744  /   52.362  /   93.269    -     368.7 ms
   9: hashit/chain             74.988  /   68.210  /   86.581    -     375.0 ms
  10: tommyds/dynamic          79.678  /   70.258  /   88.122    -     398.4 ms
  11: clark/hashtable          87.447  /   66.668  /  107.591    -     437.3 ms
  12: apr/hashtable            85.591  /   72.962  /  109.483    -     428.0 ms
  13: google/c-dense           90.554  /   78.690  /  108.507    -     452.8 ms
  14: rdestl::hash_map         89.416  /   67.646  /  109.474    -     447.1 ms
  15: apr-no-pool/hashtable    88.426  /   79.980  /   96.835    -     442.2 ms
  16: hashit/open              90.448  /   87.522  /   94.901    -     452.3 ms
  17: libCDS/HashMap           97.021  /   72.107  /  114.454    -     485.1 ms
  18: python/hashtable        101.209  /   90.021  /  110.640    -     506.1 ms
  19: calg/hashtable           99.925  /   82.205  /  114.406    -     499.7 ms
  20: libcfu/hashtable        105.577  /   80.724  /  138.123    -     527.9 ms
  21: klib/khash              108.566  /   96.531  /  126.522    -     542.8 ms
  22: uthash/hashtable        112.794  /   86.245  /  138.366    -     564.0 ms
  23: ulib/open-hash          109.650  /   89.877  /  130.165    -     548.3 ms
  24: amtl::hashmap           121.221  /  108.657  /  137.030    -     606.1 ms
  25: google/c-sparse         150.821  /  123.865  /  162.986    -     766.2 ms
  26: boost::unordered_map    160.898  /  146.464  /  187.329    -     804.5 ms
  27: std::unordered_map      159.154  /  153.971  /  171.326    -     795.8 ms
  28: mct::closed_hash_map    179.140  /  160.321  /  203.145    -     895.7 ms
  29: mct::linked_hash_map    206.380  /  196.413  /  222.819    -       1.0 s 
  30: rigtorp::hashmap        235.508  /  218.659  /  254.488    -       1.1 s 
  31: google::densehash       303.960  /  296.100  /  310.389    -       1.5 s 
  32: google::sparsehash      772.648  /  764.274  /  787.327    -       3.8 s 
  33: oddou::hashmap         1099.354  / 1086.630  / 1110.088    -       5.4 s 

Running test [delete]. Please wait ...
  battle for 33: oddou::hashmap too slow                                    
  battle for 32: google::sparsehash too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: google/c-sparse too slow                                    
  battle for 26: std::unordered_map too slow                                    
  battle for 25: boost::unordered_map too slow                                    
  battle for 24: amtl::hashmap too slow                                    
  battle for 23: google/c-dense too slow                                    
  battle for 22: python/hashtable too slow                                    
  battle for 21: libcfu/hashtable too slow                                    
  battle for 20: calg/hashtable too slow                                    
  battle for 19: libCDS/HashMap too slow                                    
  battle for 18: hashit/open too slow                                    
  battle for 17: uthash/hashtable too slow                                    
  battle for 16: tommyds/dynamic too slow                                    
  battle for 15: rdestl::hash_map too slow                                    
  battle for 14: klib/khash too slow                                    
  battle for 13: ulib/open-hash too slow                                    
  battle for 12: tommyds/linear too slow                                    
  battle for 11: clark/hashtable too slow                                    
  battle for 10: libevent/ht too slow                                    
  battle for  9: hashit/overflow too slow                                    
  battle for  8: apr/hashtable too slow                                    
  battle for  7: apr-no-pool/hashtable too slow                                    
  battle for  6: hashit/chain too slow                                    
  battle for  5: ulib::open-hash++ too slow                                    
  battle for  4: glib/ghash too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: ulib::chain-hash++ too slow                                    
  winner is   1: gcc/hashtab

Results of test [delete] - 1e4 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: gcc/hashtab              46.108  /   35.444  /   63.501    -     234.6 ms
   2: ulib::chain-hash++       55.359  /   37.192  /   71.022    -     276.8 ms
   3: ulib/chain-hash          60.868  /   51.477  /   72.054    -     304.4 ms
   4: glib/ghash               56.809  /   38.777  /   74.199    -     284.1 ms
   5: ulib::open-hash++        60.122  /   55.476  /   64.150    -     300.6 ms
   6: hashit/chain             61.877  /   51.188  /   70.390    -     309.4 ms
   7: apr-no-pool/hashtable    61.188  /   52.878  /   74.491    -     306.0 ms
   8: apr/hashtable            61.980  /   52.447  /   75.616    -     309.9 ms
   9: hashit/overflow          63.657  /   49.647  /   77.026    -     318.3 ms
  10: libevent/ht              81.256  /   64.533  /   95.938    -     406.3 ms
  11: clark/hashtable          81.492  /   67.365  /   91.063    -     407.5 ms
  12: tommyds/linear           85.530  /   72.073  /  102.707    -     427.7 ms
  13: ulib/open-hash           87.522  /   66.748  /  102.751    -     437.6 ms
  14: klib/khash               89.075  /   76.089  /   99.159    -     445.4 ms
  15: rdestl::hash_map         89.026  /   75.827  /  101.188    -     445.2 ms
  16: tommyds/dynamic          91.573  /   74.374  /  111.655    -     457.9 ms
  17: uthash/hashtable         92.686  /   81.436  /  105.597    -     463.5 ms
  18: hashit/open              98.886  /   71.102  /  117.520    -     494.5 ms
  19: libCDS/HashMap           97.524  /   79.884  /  111.845    -     487.6 ms
  20: calg/hashtable           98.871  /   87.939  /  117.790    -     494.4 ms
  21: libcfu/hashtable        100.649  /   88.691  /  118.763    -     503.3 ms
  22: python/hashtable        113.426  /   91.328  /  132.462    -     567.2 ms
  23: google/c-dense          131.091  /  111.645  /  149.522    -     655.5 ms
  24: amtl::hashmap           125.683  /  113.529  /  135.623    -     628.4 ms
  25: boost::unordered_map    158.521  /  145.897  /  169.097    -     792.6 ms
  26: std::unordered_map      167.674  /  154.307  /  176.751    -     838.4 ms
  27: google/c-sparse         174.949  /  156.394  /  193.796    -     874.8 ms
  28: mct::closed_hash_map    178.461  /  155.527  /  193.677    -     892.3 ms
  29: mct::linked_hash_map    193.154  /  173.197  /  218.477    -     965.8 ms
  30: rigtorp::hashmap        289.574  /  281.811  /  298.907    -       1.4 s 
  31: google::densehash       359.391  /  337.567  /  384.695    -       1.7 s 
  32: google::sparsehash      949.160  /  944.276  /  956.094    -       4.7 s 
  33: oddou::hashmap         1407.607  / 1382.661  / 1432.341    -       7.0 s 

Running test [replace]. Please wait ...
  battle for 33: google::densehash too slow                                    
  battle for 32: rigtorp::hashmap too slow                                    
  battle for 31: std::unordered_map too slow                                    
  battle for 30: boost::unordered_map too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: amtl::hashmap too slow                                    
  battle for 26: hashit/open too slow                                    
  battle for 25: google/c-sparse too slow                                    
  battle for 24: hashit/overflow too slow                                    
  battle for 23: uthash/hashtable too slow                                    
  battle for 22: klib/khash too slow                                    
  battle for 21: rdestl::hash_map too slow                                    
  battle for 20: ulib/open-hash too slow                                    
  battle for 19: libcfu/hashtable too slow                                    
  battle for 18: google/c-dense too slow                                    
  battle for 17: clark/hashtable too slow                                    
  battle for 16: python/hashtable too slow                                    
  battle for 15: calg/hashtable too slow                                    
  battle for 14: libevent/ht too slow                                    
  battle for 13: libCDS/HashMap too slow                                    
  battle for 12: apr-no-pool/hashtable too slow                                    
  battle for 11: hashit/chain too slow                                    
  battle for 10: ulib/chain-hash too slow                                    
  battle for  9: tommyds/linear too slow                                    
  battle for  8: apr/hashtable too slow                                    
  battle for  7: tommyds/dynamic too slow                                    
  battle for  6: ulib::open-hash++ too slow                                    
  battle for  5: gcc/hashtab too slow                                    
  battle for  4: ulib::chain-hash++ too slow                                    
  battle for  3: glib/ghash too slow                                    
  battle for  2: google::sparsehash too slow                                    
  winner is   1: oddou::hashmap

Results of test [replace] - 1e4 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: oddou::hashmap         2297.143  / 2274.692  / 2341.662    -      11.4 s 
   2: google::sparsehash     2901.187  / 2873.546  / 2929.630    -      14.5 s 
   3: glib/ghash               89.298  /   75.731  /  108.307    -     446.5 ms
   4: ulib::chain-hash++       90.671  /   80.540  /  106.024    -     453.4 ms
   5: gcc/hashtab              98.061  /   81.100  /  111.642    -     490.3 ms
   6: ulib::open-hash++       100.814  /   83.369  /  117.561    -     504.1 ms
   7: tommyds/dynamic         116.011  /  107.744  /  123.559    -     580.1 ms
   8: apr/hashtable           117.348  /  112.012  /  122.903    -     586.8 ms
   9: tommyds/linear          121.510  /  105.652  /  136.478    -     607.6 ms
  10: ulib/chain-hash         121.594  /   99.410  /  137.375    -     608.0 ms
  11: hashit/chain            124.814  /  111.152  /  134.271    -     624.1 ms
  12: apr-no-pool/hashtable   128.067  /  109.342  /  145.813    -     640.4 ms
  13: libCDS/HashMap          137.960  /  127.232  /  145.960    -     689.8 ms
  14: libevent/ht             140.182  /  122.431  /  152.731    -     701.0 ms
  15: calg/hashtable          148.087  /  129.344  /  167.478    -     740.5 ms
  16: python/hashtable        156.675  /  138.384  /  171.160    -     783.4 ms
  17: clark/hashtable         153.960  /  138.127  /  167.145    -     769.8 ms
  18: google/c-dense          162.353  /  153.626  /  168.266    -     811.8 ms
  19: libcfu/hashtable        179.292  /  168.595  /  191.788    -     896.5 ms
  20: ulib/open-hash          183.255  /  168.728  /  205.403    -     916.3 ms
  21: rdestl::hash_map        188.203  /  174.336  /  195.677    -     941.1 ms
  22: klib/khash              191.389  /  168.431  /  207.203    -     957.0 ms
  23: uthash/hashtable        190.253  /  182.501  /  198.628    -     951.3 ms
  24: hashit/overflow         216.358  /  190.098  /  244.154    -       1.0 s 
  25: google/c-sparse         243.299  /  227.413  /  258.191    -       1.2 s 
  26: hashit/open             262.625  /  250.405  /  273.650    -       1.3 s 
  27: amtl::hashmap           266.575  /  257.087  /  273.302    -       1.3 s 
  28: mct::closed_hash_map    301.710  /  292.214  /  312.529    -       1.5 s 
  29: mct::linked_hash_map    366.465  /  352.175  /  385.095    -       1.8 s 
  30: boost::unordered_map    342.473  /  318.000  /  374.186    -       1.7 s 
  31: std::unordered_map      352.174  /  343.638  /  360.422    -       1.7 s 
  32: rigtorp::hashmap        632.411  /  616.737  /  648.004    -       3.1 s 
  33: google::densehash       852.432  /  845.398  /  863.580    -       4.2 s 

Running test [kbench]. Please wait ...
  battle for 33: oddou::hashmap too slow                                    
  battle for 32: google::sparsehash too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: std::unordered_map too slow                                    
  battle for 26: boost::unordered_map too slow                                    
  battle for 25: google/c-sparse too slow                                    
  battle for 24: amtl::hashmap too slow                                    
  battle for 23: google/c-dense too slow                                    
  battle for 22: python/hashtable too slow                                    
  battle for 21: libcfu/hashtable too slow                                    
  battle for 20: calg/hashtable too slow                                    
  battle for 19: rdestl::hash_map too slow                                    
  battle for 18: hashit/open too slow                                    
  battle for 17: uthash/hashtable too slow                                    
  battle for 16: libCDS/HashMap too slow                                    
  battle for 15: klib/khash too slow                                    
  battle for 14: clark/hashtable too slow                                    
  battle for 13: tommyds/dynamic too slow                                    
  battle for 12: ulib/open-hash too slow                                    
  battle for 11: libevent/ht too slow                                    
  battle for 10: tommyds/linear too slow                                    
  battle for  9: hashit/overflow too slow                                    
  battle for  8: apr-no-pool/hashtable too slow                                    
  battle for  7: hashit/chain too slow                                    
  battle for  6: ulib::open-hash++ too slow                                    
  battle for  5: ulib/chain-hash too slow                                    
  battle for  4: apr/hashtable too slow                                    
  battle for  3: ulib::chain-hash++ too slow                                    
  battle for  2: glib/ghash too slow                                    
  winner is   1: gcc/hashtab

Results of test [kbench] - 1e4 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: gcc/hashtab              59.859  /   49.876  /   74.331    -     299.3 ms
   2: glib/ghash               62.929  /   54.448  /   81.726    -     314.7 ms
   3: ulib::chain-hash++       62.259  /   53.799  /   70.553    -     311.3 ms
   4: apr/hashtable            64.881  /   50.518  /   88.765    -     324.4 ms
   5: ulib/chain-hash          69.716  /   54.575  /   79.600    -     348.6 ms
   6: ulib::open-hash++        68.478  /   58.642  /   86.154    -     342.4 ms
   7: hashit/chain             70.119  /   61.765  /   81.675    -     350.6 ms
   8: apr-no-pool/hashtable    74.528  /   60.764  /   83.202    -     372.7 ms
   9: hashit/overflow          72.334  /   54.897  /   89.907    -     361.7 ms
  10: tommyds/linear           95.891  /   84.968  /  109.768    -     479.5 ms
  11: libevent/ht              91.952  /   79.982  /  109.314    -     459.8 ms
  12: ulib/open-hash           96.177  /   73.648  /  110.031    -     480.9 ms
  13: tommyds/dynamic          96.296  /   82.490  /  110.545    -     481.5 ms
  14: clark/hashtable          99.994  /   73.204  /  123.316    -     500.0 ms
  15: klib/khash               99.876  /   74.185  /  121.995    -     499.4 ms
  16: libCDS/HashMap          101.211  /   92.375  /  118.260    -     506.1 ms
  17: uthash/hashtable        100.465  /   96.331  /  106.148    -     502.4 ms
  18: hashit/open             104.648  /   94.481  /  111.419    -     523.3 ms
  19: rdestl::hash_map        109.139  /   97.707  /  133.721    -     545.7 ms
  20: calg/hashtable          112.519  /   82.897  /  134.113    -     562.6 ms
  21: libcfu/hashtable        108.783  /  101.961  /  118.045    -     544.0 ms
  22: python/hashtable        118.295  /   92.885  /  139.346    -     591.5 ms
  23: google/c-dense          124.408  /  109.071  /  141.725    -     622.1 ms
  24: amtl::hashmap           155.112  /  141.739  /  171.729    -     775.6 ms
  25: google/c-sparse         182.857  /  156.183  /  199.682    -     914.3 ms
  26: boost::unordered_map    188.241  /  162.251  /  214.016    -     941.3 ms
  27: std::unordered_map      201.998  /  187.855  /  213.810    -       1.0 s 
  28: mct::closed_hash_map    200.779  /  192.219  /  212.392    -       1.0 s 
  29: mct::linked_hash_map    212.013  /  193.882  /  227.562    -       1.0 s 
  30: rigtorp::hashmap        304.533  /  282.960  /  313.538    -       1.5 s 
  31: google::densehash       432.623  /  421.378  /  449.018    -       2.1 s 
  32: google::sparsehash     1224.516  / 1218.958  / 1230.131    -       6.1 s 
  33: oddou::hashmap         1511.625  / 1500.742  / 1526.394    -       7.5 s 
