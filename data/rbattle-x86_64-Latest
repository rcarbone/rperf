Linux nuc 3.2.0-4-amd64 #1 SMP Debian 3.2.88-1 x86_64

Running test [grow]. Please wait ...
  battle for 39: oddou::hashmap too slow                                    
  battle for 38: google::sparsehash too slow                                    
  battle for 37: google::densehash too slow                                    
  battle for 36: tbb::concurrent_unordered_map too slow                                    
  battle for 35: ulib::open-hash++ too slow                                    
  battle for 34: mct::linked_hash_map too slow                                    
  battle for 33: rigtorp::hashmap too slow                                    
  battle for 32: libcfu/hashtable too slow                                    
  battle for 31: boost::unordered_map too slow                                    
  battle for 30: mct::closed_hash_map too slow                                    
  battle for 29: google/c-sparse too slow                                    
  battle for 28: std::unordered_map too slow                                    
  battle for 27: amtl::hashmap too slow                                    
  battle for 26: eastl/hashmap too slow                                    
  battle for 25: google/c-dense too slow                                    
  battle for 24: emilib::HashMap too slow                                    
  battle for 23: ulib/open-hash too slow                                    
  battle for 22: apr-no-pool/hashtable too slow                                    
  battle for 21: klib/khash too slow                                    
  battle for 20: rdestl::hash_map too slow                                    
  battle for 19: libCDS/HashMap too slow                                    
  battle for 18: calg/hashtable too slow                                    
  battle for 17: clark/hashtable too slow                                    
  battle for 16: python/hashtable too slow                                    
  battle for 15: uthash/hashtable too slow                                    
  battle for 14: hashit/chain too slow                                    
  battle for 13: ulib::chain-hash++ too slow                                    
  battle for 12: Qt::QHash too slow                                    
  battle for 11: apr/hashtable too slow                                    
  battle for 10: libghthash/hashtable too slow                                    
  battle for  9: hashit/open too slow                                    
  battle for  8: tommyds/linear too slow                                    
  battle for  7: hashit/overflow too slow                                    
  battle for  6: ulib/chain-hash too slow                                    
  battle for  5: tommyds/dynamic too slow                                    
  battle for  4: libevent/ht too slow                                    
  battle for  3: ccan/htable too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: glib/ghash

Results of test [grow] - 1e5 items (5 loops per test)
      Implementation                -   avg         min         max   ms -   elapsed
   1: glib/ghash                        9.728  /    9.706  /    9.746    -      48.6 ms
   2: gcc/hashtab                      11.741  /   11.718  /   11.807    -      58.7 ms
   3: ccan/htable                      14.328  /   14.321  /   14.332    -      71.6 ms
   4: libevent/ht                      14.966  /   14.927  /   15.009    -      74.8 ms
   5: tommyds/dynamic                  15.357  /   15.312  /   15.442    -      76.7 ms
   6: ulib/chain-hash                  19.974  /   19.811  /   20.283    -      99.8 ms
   7: hashit/overflow                  20.766  /   20.577  /   21.038    -     103.8 ms
   8: tommyds/linear                   22.953  /   22.882  /   23.045    -     114.7 ms
   9: hashit/open                      23.458  /   23.426  /   23.490    -     117.2 ms
  10: libghthash/hashtable             24.561  /   24.308  /   24.804    -     122.8 ms
  11: apr/hashtable                    25.440  /   25.351  /   25.567    -     127.2 ms
  12: Qt::QHash                        27.257  /   27.135  /   27.388    -     136.2 ms
  13: ulib::chain-hash++               28.749  /   28.697  /   28.845    -     143.7 ms
  14: hashit/chain                     30.409  /   30.020  /   31.318    -     152.0 ms
  15: uthash/hashtable                 31.014  /   30.769  /   31.729    -     155.0 ms
  16: python/hashtable                 34.101  /   33.891  /   34.454    -     170.5 ms
  17: clark/hashtable                  33.804  /   33.689  /   34.194    -     169.0 ms
  18: calg/hashtable                   34.274  /   34.107  /   34.461    -     171.3 ms
  19: libCDS/HashMap                   34.631  /   34.432  /   34.774    -     173.1 ms
  20: rdestl::hash_map                 37.785  /   36.089  /   38.433    -     188.9 ms
  21: klib/khash                       38.907  /   38.766  /   39.029    -     194.5 ms
  22: apr-no-pool/hashtable            39.199  /   38.855  /   40.488    -     196.0 ms
  23: ulib/open-hash                   43.410  /   43.314  /   43.547    -     217.0 ms
  24: emilib::HashMap                  43.867  /   43.730  /   44.166    -     219.3 ms
  25: google/c-dense                   44.149  /   44.038  /   44.489    -     220.7 ms
  26: eastl/hashmap                    46.945  /   46.844  /   47.072    -     234.7 ms
  27: amtl::hashmap                    55.897  /   54.583  /   56.295    -     279.4 ms
  28: std::unordered_map               62.522  /   62.240  /   62.937    -     312.6 ms
  29: google/c-sparse                  66.533  /   66.422  /   66.730    -     332.6 ms
  30: mct::closed_hash_map             74.291  /   73.988  /   75.044    -     371.4 ms
  31: boost::unordered_map             74.367  /   73.975  /   75.283    -     371.8 ms
  32: libcfu/hashtable                 77.199  /   76.715  /   78.275    -     386.0 ms
  33: rigtorp::hashmap                 76.339  /   76.224  /   76.598    -     381.7 ms
  34: mct::linked_hash_map             77.069  /   74.797  /   77.868    -     385.3 ms
  35: ulib::open-hash++                96.322  /   96.226  /   96.557    -     481.6 ms
  36: tbb::concurrent_unordered_map   111.273  /  110.942  /  111.539    -     556.3 ms
  37: google::densehash               131.179  /  131.046  /  131.279    -     655.9 ms
  38: google::sparsehash              317.640  /  316.735  /  318.400    -       1.5 s 
  39: oddou::hashmap                  660.715  /  646.871  /  715.558    -       3.3 s 

Running test [hit]. Please wait ...
  battle for 39: oddou::hashmap too slow                                    
  battle for 38: google::sparsehash too slow                                    
  battle for 37: ulib::chain-hash++ too slow                                    
  battle for 36: google::densehash too slow                                    
  battle for 35: tbb::concurrent_unordered_map too slow                                    
  battle for 34: ulib::open-hash++ too slow                                    
  battle for 33: mct::linked_hash_map too slow                                    
  battle for 32: boost::unordered_map too slow                                    
  battle for 31: libcfu/hashtable too slow                                    
  battle for 30: mct::closed_hash_map too slow                                    
  battle for 29: rigtorp::hashmap too slow                                    
  battle for 28: std::unordered_map too slow                                    
  battle for 27: google/c-sparse too slow                                    
  battle for 26: amtl::hashmap too slow                                    
  battle for 25: google/c-dense too slow                                    
  battle for 24: eastl/hashmap too slow                                    
  battle for 23: ulib/open-hash too slow                                    
  battle for 22: klib/khash too slow                                    
  battle for 21: emilib::HashMap too slow                                    
  battle for 20: uthash/hashtable too slow                                    
  battle for 19: hashit/chain too slow                                    
  battle for 18: Qt::QHash too slow                                    
  battle for 17: rdestl::hash_map too slow                                    
  battle for 16: clark/hashtable too slow                                    
  battle for 15: hashit/open too slow                                    
  battle for 14: apr-no-pool/hashtable too slow                                    
  battle for 13: hashit/overflow too slow                                    
  battle for 12: calg/hashtable too slow                                    
  battle for 11: libCDS/HashMap too slow                                    
  battle for 10: python/hashtable too slow                                    
  battle for  9: tommyds/linear too slow                                    
  battle for  8: libghthash/hashtable too slow                                    
  battle for  7: apr/hashtable too slow                                    
  battle for  6: ccan/htable too slow                                    
  battle for  5: libevent/ht too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: tommyds/dynamic too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: glib/ghash

Results of test [hit] - 1e5 items (5 loops per test)
      Implementation                -   avg         min         max   ms -   elapsed
   1: glib/ghash                       15.982  /   15.880  /   16.041    -      79.9 ms
   2: gcc/hashtab                      25.786  /   25.720  /   25.867    -     128.9 ms
   3: tommyds/dynamic                  25.682  /   25.581  /   25.765    -     128.4 ms
   4: ulib/chain-hash                  26.604  /   26.421  /   26.860    -     133.0 ms
   5: libevent/ht                      27.447  /   27.311  /   27.634    -     137.2 ms
   6: ccan/htable                      29.953  /   29.894  /   30.128    -     149.7 ms
   7: apr/hashtable                    32.284  /   32.182  /   32.335    -     161.4 ms
   8: libghthash/hashtable             32.752  /   32.576  /   32.878    -     163.7 ms
   9: tommyds/linear                   41.600  /   40.186  /   43.612    -     208.0 ms
  10: python/hashtable                 47.338  /   45.999  /   48.790    -     236.7 ms
  11: libCDS/HashMap                   44.081  /   42.999  /   46.085    -     220.4 ms
  12: calg/hashtable                   43.323  /   43.104  /   43.473    -     216.6 ms
  13: hashit/overflow                  43.822  /   43.210  /   44.590    -     219.1 ms
  14: apr-no-pool/hashtable            47.707  /   47.340  /   48.021    -     238.5 ms
  15: hashit/open                      48.224  /   47.997  /   48.561    -     241.1 ms
  16: clark/hashtable                  52.507  /   50.557  /   56.336    -     262.5 ms
  17: rdestl::hash_map                 53.335  /   52.868  /   54.533    -     266.6 ms
  18: Qt::QHash                        53.085  /   52.880  /   53.300    -     265.4 ms
  19: hashit/chain                     59.307  /   56.297  /   62.087    -     296.5 ms
  20: uthash/hashtable                 62.468  /   61.587  /   65.483    -     312.3 ms
  21: emilib::HashMap                  57.447  /   56.124  /   62.463    -     287.2 ms
  22: klib/khash                       64.546  /   63.652  /   65.718    -     322.7 ms
  23: ulib/open-hash                   68.933  /   62.389  /   86.857    -     344.6 ms
  24: eastl/hashmap                    67.367  /   67.238  /   67.598    -     336.8 ms
  25: google/c-dense                   67.153  /   62.525  /   79.799    -     335.7 ms
  26: amtl::hashmap                    75.867  /   74.541  /   77.987    -     379.3 ms
  27: google/c-sparse                  86.178  /   85.612  /   87.184    -     430.9 ms
  28: std::unordered_map               96.539  /   91.444  /  101.561    -     482.7 ms
  29: rigtorp::hashmap                102.442  /   99.016  /  107.378    -     512.2 ms
  30: mct::closed_hash_map            100.154  /   99.803  /  101.005    -     500.7 ms
  31: libcfu/hashtable                106.332  /  105.635  /  107.551    -     531.6 ms
  32: boost::unordered_map            112.966  /  112.594  /  113.231    -     564.8 ms
  33: mct::linked_hash_map            113.983  /  108.620  /  115.985    -     569.9 ms
  34: ulib::open-hash++               123.926  /  123.592  /  124.533    -     619.6 ms
  35: tbb::concurrent_unordered_map   185.713  /  178.700  /  204.429    -     928.5 ms
  36: google::densehash               186.639  /  180.922  /  208.179    -     933.2 ms
  37: ulib::chain-hash++              192.469  /  190.585  /  196.380    -     962.3 ms
  38: google::sparsehash              495.562  /  494.828  /  496.480    -       2.4 s 
  39: oddou::hashmap                  709.354  /  708.954  /  710.080    -       3.5 s 

Running test [miss]. Please wait ...
  battle for 39: oddou::hashmap too slow                                    
  battle for 38: google::sparsehash too slow                                    
  battle for 37: tbb::concurrent_unordered_map too slow                                    
  battle for 36: google::densehash too slow                                    
  battle for 35: boost::unordered_map too slow                                    
  battle for 34: mct::linked_hash_map too slow                                    
  battle for 33: rigtorp::hashmap too slow                                    
  battle for 32: mct::closed_hash_map too slow                                    
  battle for 31: libcfu/hashtable too slow                                    
  battle for 30: ulib::open-hash++ too slow                                    
  battle for 29: std::unordered_map too slow                                    
  battle for 28: klib/khash too slow                                    
  battle for 27: google/c-sparse too slow                                    
  battle for 26: amtl::hashmap too slow                                    
  battle for 25: hashit/open too slow                                    
  battle for 24: uthash/hashtable too slow                                    
  battle for 23: google/c-dense too slow                                    
  battle for 22: eastl/hashmap too slow                                    
  battle for 21: hashit/chain too slow                                    
  battle for 20: ulib/open-hash too slow                                    
  battle for 19: emilib::HashMap too slow                                    
  battle for 18: clark/hashtable too slow                                    
  battle for 17: Qt::QHash too slow                                    
  battle for 16: rdestl::hash_map too slow                                    
  battle for 15: apr-no-pool/hashtable too slow                                    
  battle for 14: hashit/overflow too slow                                    
  battle for 13: calg/hashtable too slow                                    
  battle for 12: libCDS/HashMap too slow                                    
  battle for 11: python/hashtable too slow                                    
  battle for 10: tommyds/linear too slow                                    
  battle for  9: libghthash/hashtable too slow                                    
  battle for  8: apr/hashtable too slow                                    
  battle for  7: ulib/chain-hash too slow                                    
  battle for  6: ulib::chain-hash++ too slow                                    
  battle for  5: libevent/ht too slow                                    
  battle for  4: gcc/hashtab too slow                                    
  battle for  3: ccan/htable too slow                                    
  battle for  2: tommyds/dynamic too slow                                    
  winner is   1: glib/ghash

Results of test [miss] - 1e5 items (5 loops per test)
      Implementation                -   avg         min         max   ms -   elapsed
   1: glib/ghash                       17.572  /   17.479  /   17.682    -      87.8 ms
   2: tommyds/dynamic                  28.753  /   28.590  /   28.926    -     143.7 ms
   3: ccan/htable                      30.551  /   30.424  /   30.671    -     152.7 ms
   4: gcc/hashtab                      31.372  /   31.242  /   31.613    -     156.8 ms
   5: libevent/ht                      32.841  /   32.711  /   32.968    -     164.2 ms
   6: ulib::chain-hash++               35.360  /   33.077  /   42.237    -     176.8 ms
   7: ulib/chain-hash                  34.833  /   34.728  /   34.914    -     174.1 ms
   8: apr/hashtable                    35.978  /   35.841  /   36.115    -     179.9 ms
   9: libghthash/hashtable             36.605  /   36.157  /   36.793    -     183.0 ms
  10: tommyds/linear                   40.147  /   40.025  /   40.322    -     200.7 ms
  11: python/hashtable                 45.161  /   45.002  /   45.277    -     225.8 ms
  12: libCDS/HashMap                   46.431  /   46.260  /   46.583    -     232.1 ms
  13: calg/hashtable                   46.621  /   46.501  /   46.850    -     233.1 ms
  14: hashit/overflow                  48.269  /   47.967  /   49.079    -     241.3 ms
  15: apr-no-pool/hashtable            49.891  /   49.627  /   50.094    -     249.4 ms
  16: rdestl::hash_map                 51.918  /   50.886  /   52.465    -     259.6 ms
  17: Qt::QHash                        56.785  /   56.063  /   57.915    -     283.9 ms
  18: clark/hashtable                  56.909  /   56.026  /   59.371    -     284.5 ms
  19: emilib::HashMap                  59.585  /   59.102  /   60.185    -     297.9 ms
  20: ulib/open-hash                   62.709  /   62.565  /   62.965    -     313.5 ms
  21: hashit/chain                     64.201  /   63.692  /   64.693    -     321.0 ms
  22: eastl/hashmap                    65.228  /   64.771  /   66.181    -     326.1 ms
  23: google/c-dense                   66.386  /   66.191  /   66.651    -     331.9 ms
  24: uthash/hashtable                 67.409  /   66.950  /   67.775    -     337.0 ms
  25: hashit/open                      72.863  /   72.585  /   73.053    -     364.3 ms
  26: amtl::hashmap                    75.212  /   73.535  /   77.646    -     376.0 ms
  27: google/c-sparse                  83.453  /   83.167  /   84.179    -     417.2 ms
  28: klib/khash                       86.967  /   86.601  /   87.271    -     434.8 ms
  29: std::unordered_map               92.435  /   91.931  /   93.528    -     462.1 ms
  30: ulib::open-hash++                96.095  /   95.983  /   96.221    -     480.4 ms
  31: libcfu/hashtable                102.214  /  100.993  /  103.845    -     511.0 ms
  32: mct::closed_hash_map            105.880  /  105.501  /  106.445    -     529.4 ms
  33: rigtorp::hashmap                115.572  /  114.318  /  119.241    -     577.8 ms
  34: mct::linked_hash_map            114.694  /  110.007  /  118.471    -     573.4 ms
  35: boost::unordered_map            120.669  /  119.043  /  122.073    -     603.3 ms
  36: google::densehash               158.246  /  158.077  /  158.357    -     791.2 ms
  37: tbb::concurrent_unordered_map   178.200  /  177.509  /  178.684    -     891.0 ms
  38: google::sparsehash              474.819  /  472.123  /  478.767    -       2.3 s 
  39: oddou::hashmap                  751.469  /  750.845  /  751.923    -       3.7 s 

Running test [delete]. Please wait ...
  battle for 39: oddou::hashmap too slow                                    
  battle for 38: google::sparsehash too slow                                    
  battle for 37: tbb::concurrent_unordered_map too slow                                    
  battle for 36: ulib::chain-hash++ too slow                                    
  battle for 35: google::densehash too slow                                    
  battle for 34: rigtorp::hashmap too slow                                    
  battle for 33: google/c-sparse too slow                                    
  battle for 32: ulib::open-hash++ too slow                                    
  battle for 31: mct::linked_hash_map too slow                                    
  battle for 30: boost::unordered_map too slow                                    
  battle for 29: mct::closed_hash_map too slow                                    
  battle for 28: hashit/open too slow                                    
  battle for 27: std::unordered_map too slow                                    
  battle for 26: libcfu/hashtable too slow                                    
  battle for 25: google/c-dense too slow                                    
  battle for 24: amtl::hashmap too slow                                    
  battle for 23: eastl/hashmap too slow                                    
  battle for 22: ulib/open-hash too slow                                    
  battle for 21: emilib::HashMap too slow                                    
  battle for 20: uthash/hashtable too slow                                    
  battle for 19: rdestl::hash_map too slow                                    
  battle for 18: klib/khash too slow                                    
  battle for 17: tommyds/linear too slow                                    
  battle for 16: clark/hashtable too slow                                    
  battle for 15: Qt::QHash too slow                                    
  battle for 14: python/hashtable too slow                                    
  battle for 13: calg/hashtable too slow                                    
  battle for 12: libCDS/HashMap too slow                                    
  battle for 11: hashit/chain too slow                                    
  battle for 10: hashit/overflow too slow                                    
  battle for  9: ccan/htable too slow                                    
  battle for  8: tommyds/dynamic too slow                                    
  battle for  7: libevent/ht too slow                                    
  battle for  6: libghthash/hashtable too slow                                    
  battle for  5: apr-no-pool/hashtable too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [delete] - 1e5 items (5 loops per test)
      Implementation                -   avg         min         max   ms -   elapsed
   1: glib/ghash                       16.877  /   16.840  /   16.965    -      84.3 ms
   2: apr/hashtable                    20.362  /   19.978  /   20.681    -     101.8 ms
   3: gcc/hashtab                      22.420  /   22.318  /   22.511    -     112.1 ms
   4: ulib/chain-hash                  23.408  /   23.373  /   23.448    -     117.0 ms
   5: apr-no-pool/hashtable            27.787  /   27.729  /   27.900    -     138.9 ms
   6: libghthash/hashtable             28.495  /   28.446  /   28.536    -     142.4 ms
   7: libevent/ht                      32.851  /   32.624  /   33.205    -     164.2 ms
   8: tommyds/dynamic                  33.071  /   32.985  /   33.237    -     165.3 ms
   9: ccan/htable                      35.170  /   35.152  /   35.206    -     175.8 ms
  10: hashit/overflow                  37.544  /   36.981  /   38.994    -     187.7 ms
  11: hashit/chain                     38.007  /   37.857  /   38.322    -     190.0 ms
  12: libCDS/HashMap                   39.550  /   39.437  /   39.875    -     197.7 ms
  13: calg/hashtable                   40.148  /   40.014  /   40.283    -     200.7 ms
  14: python/hashtable                 43.189  /   43.143  /   43.240    -     215.9 ms
  15: Qt::QHash                        43.570  /   42.999  /   44.122    -     217.8 ms
  16: clark/hashtable                  45.968  /   45.908  /   46.049    -     229.8 ms
  17: tommyds/linear                   46.730  /   46.670  /   46.857    -     233.6 ms
  18: klib/khash                       49.840  /   49.684  /   50.112    -     249.2 ms
  19: rdestl::hash_map                 50.472  /   48.876  /   51.190    -     252.3 ms
  20: uthash/hashtable                 50.658  /   50.603  /   50.805    -     253.2 ms
  21: emilib::HashMap                  52.651  /   52.469  /   53.227    -     263.2 ms
  22: ulib/open-hash                   53.949  /   53.842  /   54.096    -     269.7 ms
  23: eastl/hashmap                    55.333  /   55.029  /   56.474    -     276.6 ms
  24: amtl::hashmap                    79.843  /   78.156  /   80.561    -     399.2 ms
  25: google/c-dense                   83.356  /   83.082  /   84.147    -     416.7 ms
  26: libcfu/hashtable                 83.754  /   83.467  /   84.133    -     418.7 ms
  27: std::unordered_map               87.530  /   87.408  /   87.724    -     437.6 ms
  28: hashit/open                      89.201  /   89.065  /   89.336    -     446.0 ms
  29: mct::closed_hash_map             97.887  /   97.680  /   98.130    -     489.4 ms
  30: boost::unordered_map            103.405  /  100.752  /  113.037    -     517.0 ms
  31: mct::linked_hash_map            131.083  /  110.959  /  157.926    -     655.4 ms
  32: ulib::open-hash++               113.955  /  112.715  /  116.250    -     569.7 ms
  33: google/c-sparse                 117.279  /  116.384  /  118.600    -     586.4 ms
  34: rigtorp::hashmap                130.907  /  130.640  /  131.110    -     654.5 ms
  35: google::densehash               202.741  /  201.832  /  203.090    -       1.0 s 
  36: ulib::chain-hash++              223.789  /  219.212  /  228.549    -       1.1 s 
  37: tbb::concurrent_unordered_map   278.174  /  276.523  /  279.329    -       1.3 s 
  38: google::sparsehash              569.193  /  567.234  /  570.930    -       2.8 s 
  39: oddou::hashmap                 1075.441  / 1074.842  / 1075.755    -       5.3 s 

Running test [replace]. Please wait ...
  battle for 39: hashit/overflow too slow                                    
  battle for 38: google::sparsehash too slow                                    
  battle for 37: oddou::hashmap too slow                                    
  battle for 36: ulib::chain-hash++ too slow                                    
  battle for 35: google::densehash too slow                                    
  battle for 34: tbb::concurrent_unordered_map too slow                                    
  battle for 33: hashit/open too slow                                    
  battle for 32: rigtorp::hashmap too slow                                    
  battle for 31: boost::unordered_map too slow                                    
  battle for 30: mct::linked_hash_map too slow                                    
  battle for 29: google/c-sparse too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: ulib::open-hash++ too slow                                    
  battle for 26: std::unordered_map too slow                                    
  battle for 25: google/c-dense too slow                                    
  battle for 24: libcfu/hashtable too slow                                    
  battle for 23: amtl::hashmap too slow                                    
  battle for 22: emilib::HashMap too slow                                    
  battle for 21: eastl/hashmap too slow                                    
  battle for 20: uthash/hashtable too slow                                    
  battle for 19: klib/khash too slow                                    
  battle for 18: hashit/chain too slow                                    
  battle for 17: ulib/open-hash too slow                                    
  battle for 16: rdestl::hash_map too slow                                    
  battle for 15: clark/hashtable too slow                                    
  battle for 14: Qt::QHash too slow                                    
  battle for 13: ccan/htable too slow                                    
  battle for 12: tommyds/linear too slow                                    
  battle for 11: calg/hashtable too slow                                    
  battle for 10: apr-no-pool/hashtable too slow                                    
  battle for  9: libghthash/hashtable too slow                                    
  battle for  8: python/hashtable too slow                                    
  battle for  7: libCDS/HashMap too slow                                    
  battle for  6: ulib/chain-hash too slow                                    
  battle for  5: libevent/ht too slow                                    
  battle for  4: gcc/hashtab too slow                                    
  battle for  3: tommyds/dynamic too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [replace] - 1e5 items (5 loops per test)
      Implementation                -   avg         min         max   ms -   elapsed
   1: glib/ghash                       41.269  /   41.133  /   41.442    -     206.3 ms
   2: apr/hashtable                    47.782  /   47.560  /   48.113    -     238.9 ms
   3: tommyds/dynamic                  52.800  /   52.423  /   53.669    -     264.0 ms
   4: gcc/hashtab                      62.965  /   61.472  /   67.860    -     314.8 ms
   5: libevent/ht                      64.535  /   64.365  /   64.990    -     322.6 ms
   6: ulib/chain-hash                  65.167  /   64.754  /   65.666    -     325.8 ms
   7: libCDS/HashMap                   66.016  /   65.668  /   66.497    -     330.0 ms
   8: python/hashtable                 66.573  /   66.326  /   66.915    -     332.8 ms
   9: libghthash/hashtable             67.675  /   67.032  /   68.012    -     338.3 ms
  10: apr-no-pool/hashtable            69.481  /   69.135  /   69.611    -     347.4 ms
  11: calg/hashtable                   69.330  /   69.265  /   69.466    -     346.6 ms
  12: tommyds/linear                   71.546  /   71.493  /   71.641    -     357.7 ms
  13: ccan/htable                      78.310  /   78.209  /   78.527    -     391.5 ms
  14: Qt::QHash                        87.335  /   87.191  /   87.488    -     436.6 ms
  15: clark/hashtable                  93.958  /   93.734  /   94.102    -     469.8 ms
  16: rdestl::hash_map                 96.442  /   95.196  /   96.814    -     482.2 ms
  17: ulib/open-hash                  100.394  /  100.243  /  100.680    -     501.9 ms
  18: hashit/chain                    100.422  /   99.874  /  101.107    -     502.1 ms
  19: klib/khash                      103.583  /  102.191  /  107.908    -     517.9 ms
  20: uthash/hashtable                113.083  /  111.784  /  115.299    -     565.4 ms
  21: eastl/hashmap                   115.294  /  112.121  /  122.589    -     576.4 ms
  22: emilib::HashMap                 236.490  /  205.675  /  264.146    -       1.1 s 
  23: amtl::hashmap                   128.007  /  126.691  /  128.497    -     640.0 ms
  24: libcfu/hashtable                139.526  /  139.412  /  139.729    -     697.6 ms
  25: google/c-dense                  132.884  /  131.101  /  133.457    -     664.4 ms
  26: std::unordered_map              184.835  /  184.590  /  185.044    -     924.1 ms
  27: ulib::open-hash++               194.628  /  193.344  /  197.071    -     973.1 ms
  28: mct::closed_hash_map            195.759  /  192.756  /  197.240    -     978.8 ms
  29: google/c-sparse                 199.034  /  198.660  /  199.199    -     995.1 ms
  30: mct::linked_hash_map            200.500  /  195.554  /  202.145    -       1.0 s 
  31: boost::unordered_map            217.152  /  216.278  /  217.962    -       1.0 s 
  32: rigtorp::hashmap                276.117  /  275.573  /  277.792    -       1.3 s 
  33: hashit/open                     343.096  /  342.054  /  344.594    -       1.7 s 
  34: tbb::concurrent_unordered_map   450.814  /  448.925  /  454.976    -       2.2 s 
  35: google::densehash               534.933  /  534.626  /  535.277    -       2.6 s 
  36: ulib::chain-hash++              615.026  /  611.744  /  619.492    -       3.0 s 
  37: oddou::hashmap                 1281.072  / 1280.531  / 1282.098    -       6.4 s 
  38: google::sparsehash             1279.735  / 1278.787  / 1280.672    -       6.3 s 
  39: hashit/overflow                2086.761  / 2082.060  / 2091.624    -      10.4 s 

Running test [kbench]. Please wait ...
  battle for 39: oddou::hashmap too slow                                    
  battle for 38: google::sparsehash too slow                                    
  battle for 37: tbb::concurrent_unordered_map too slow                                    
  battle for 36: ulib::chain-hash++ too slow                                    
  battle for 35: google::densehash too slow                                    
  battle for 34: rigtorp::hashmap too slow                                    
  battle for 33: ulib::open-hash++ too slow                                    
  battle for 32: google/c-sparse too slow                                    
  battle for 31: boost::unordered_map too slow                                    
  battle for 30: mct::linked_hash_map too slow                                    
  battle for 29: mct::closed_hash_map too slow                                    
  battle for 28: std::unordered_map too slow                                    
  battle for 27: hashit/open too slow                                    
  battle for 26: google/c-dense too slow                                    
  battle for 25: amtl::hashmap too slow                                    
  battle for 24: libcfu/hashtable too slow                                    
  battle for 23: eastl/hashmap too slow                                    
  battle for 22: klib/khash too slow                                    
  battle for 21: emilib::HashMap too slow                                    
  battle for 20: ulib/open-hash too slow                                    
  battle for 19: uthash/hashtable too slow                                    
  battle for 18: rdestl::hash_map too slow                                    
  battle for 17: clark/hashtable too slow                                    
  battle for 16: tommyds/linear too slow                                    
  battle for 15: Qt::QHash too slow                                    
  battle for 14: hashit/chain too slow                                    
  battle for 13: hashit/overflow too slow                                    
  battle for 12: python/hashtable too slow                                    
  battle for 11: calg/hashtable too slow                                    
  battle for 10: libCDS/HashMap too slow                                    
  battle for  9: ccan/htable too slow                                    
  battle for  8: libevent/ht too slow                                    
  battle for  7: tommyds/dynamic too slow                                    
  battle for  6: libghthash/hashtable too slow                                    
  battle for  5: apr-no-pool/hashtable too slow                                    
  battle for  4: gcc/hashtab too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [kbench] - 1e5 items (5 loops per test)
      Implementation                -   avg         min         max   ms -   elapsed
   1: glib/ghash                       20.222  /   20.172  /   20.306    -     101.1 ms
   2: apr/hashtable                    23.366  /   23.243  /   23.736    -     116.8 ms
   3: ulib/chain-hash                  27.921  /   27.895  /   27.967    -     139.6 ms
   4: gcc/hashtab                      29.030  /   29.001  /   29.054    -     145.1 ms
   5: apr-no-pool/hashtable            32.586  /   32.535  /   32.674    -     162.9 ms
   6: libghthash/hashtable             34.053  /   33.961  /   34.117    -     170.2 ms
   7: tommyds/dynamic                  39.645  /   39.483  /   39.753    -     198.2 ms
   8: libevent/ht                      41.128  /   41.091  /   41.160    -     205.6 ms
   9: ccan/htable                      43.470  /   43.423  /   43.579    -     217.3 ms
  10: libCDS/HashMap                   44.131  /   44.068  /   44.188    -     220.6 ms
  11: calg/hashtable                   45.218  /   45.153  /   45.312    -     226.1 ms
  12: python/hashtable                 47.307  /   47.071  /   47.631    -     236.5 ms
  13: hashit/overflow                  51.284  /   50.970  /   51.517    -     256.4 ms
  14: hashit/chain                     51.887  /   51.234  /   52.800    -     259.4 ms
  15: Qt::QHash                        54.043  /   53.901  /   54.295    -     270.2 ms
  16: tommyds/linear                   54.827  /   54.684  /   55.059    -     274.1 ms
  17: clark/hashtable                  55.909  /   55.621  /   56.597    -     279.5 ms
  18: rdestl::hash_map                 60.248  /   59.144  /   60.658    -     301.2 ms
  19: uthash/hashtable                 61.561  /   61.010  /   62.046    -     307.8 ms
  20: ulib/open-hash                   61.926  /   61.692  /   62.548    -     309.6 ms
  21: emilib::HashMap                  63.207  /   63.198  /   63.214    -     316.0 ms
  22: klib/khash                       85.498  /   68.969  /   95.059    -     427.5 ms
  23: eastl/hashmap                    87.691  /   72.815  /  102.715    -     438.4 ms
  24: libcfu/hashtable                113.913  /   94.686  /  154.265    -     569.5 ms
  25: amtl::hashmap                    91.926  /   90.788  /   92.445    -     459.6 ms
  26: google/c-dense                   94.677  /   93.740  /   96.445    -     473.3 ms
  27: hashit/open                     102.433  /  100.522  /  105.419    -     512.1 ms
  28: std::unordered_map              107.466  /  106.703  /  108.934    -     537.3 ms
  29: mct::closed_hash_map            112.203  /  111.252  /  113.939    -     561.0 ms
  30: mct::linked_hash_map            141.967  /  117.045  /  183.848    -     709.8 ms
  31: boost::unordered_map            152.170  /  128.879  /  193.255    -     760.8 ms
  32: google/c-sparse                 128.748  /  128.563  /  129.047    -     643.7 ms
  33: ulib::open-hash++               160.758  /  139.447  /  189.546    -     803.8 ms
  34: rigtorp::hashmap                142.198  /  139.774  /  144.525    -     711.0 ms
  35: google::densehash               257.201  /  251.473  /  268.659    -       1.2 s 
  36: ulib::chain-hash++              334.021  /  317.422  /  348.645    -       1.6 s 
  37: tbb::concurrent_unordered_map   322.012  /  320.777  /  323.993    -       1.6 s 
  38: google::sparsehash              784.546  /  771.405  /  808.264    -       3.9 s 
  39: oddou::hashmap                 1137.069  / 1136.535  / 1138.449    -       5.6 s 
