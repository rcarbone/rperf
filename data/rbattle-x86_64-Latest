Linux nuc 3.2.0-4-amd64 #1 SMP Debian 3.2.88-1 x86_64

Running test [grow]. Please wait ...
  battle for 41: libcfu/hashtable too slow                                    
  battle for 40: oddou::hashmap too slow                                    
  battle for 39: google::sparsehash too slow                                    
  battle for 38: google/c-sparse too slow                                    
  battle for 37: tbb::unordered_map too slow                                    
  battle for 36: ulib::open-hash++ too slow                                    
  battle for 35: stb/sdict too slow                                    
  battle for 34: boost::unordered_map too slow                                    
  battle for 33: ulib::chain-hash++ too slow                                    
  battle for 32: clark/hashtable too slow                                    
  battle for 31: apr-no-pool/hashtable too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: std::unordered_map too slow                                    
  battle for 26: calg/hashtable too slow                                    
  battle for 25: eastl::hashmap too slow                                    
  battle for 24: ulib/open-hash too slow                                    
  battle for 23: hashit/chain too slow                                    
  battle for 22: uthash/hashtable too slow                                    
  battle for 21: PeterMoore/st too slow                                    
  battle for 20: python/hashtable too slow                                    
  battle for 19: libCDS/HashMap too slow                                    
  battle for 18: Qt::QHash too slow                                    
  battle for 17: apr/hashtable too slow                                    
  battle for 16: klib/khash too slow                                    
  battle for 15: libghthash/hashtable too slow                                    
  battle for 14: google/c-dense too slow                                    
  battle for 13: emilib::HashMap too slow                                    
  battle for 12: google::densehash too slow                                    
  battle for 11: amtl::hashmap too slow                                    
  battle for 10: ulib/chain-hash too slow                                    
  battle for  9: rdestl::hash_map too slow                                    
  battle for  8: hashit/open too slow                                    
  battle for  7: libevent/ht too slow                                    
  battle for  6: hashit/overflow too slow                                    
  battle for  5: tommyds/linear too slow                                    
  battle for  4: tommyds/dynamic too slow                                    
  battle for  3: glib/ghash too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: ccan/htable

Results of test [grow] - 1e5 items (10 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: ccan/htable               6.090  /    6.045  /    6.181    -      60.9 ms
   2: gcc/hashtab               7.328  /    7.283  /    7.474    -      73.2 ms
   3: glib/ghash                8.954  /    8.911  /    9.004    -      89.5 ms
   4: tommyds/dynamic          10.564  /   10.455  /   11.096    -     105.6 ms
   5: tommyds/linear           10.755  /   10.704  /   10.837    -     107.5 ms
   6: hashit/overflow          10.373  /   10.332  /   10.426    -     103.7 ms
   7: libevent/ht              11.211  /   11.132  /   11.479    -     112.1 ms
   8: hashit/open              12.404  /   12.329  /   12.716    -     124.0 ms
   9: rdestl::hash_map         13.260  /   12.800  /   13.529    -     132.6 ms
  10: ulib/chain-hash          13.382  /   13.302  /   13.452    -     133.8 ms
  11: amtl::hashmap            14.203  /   13.783  /   14.774    -     142.0 ms
  12: google::densehash        14.771  /   14.550  /   16.134    -     147.7 ms
  13: emilib::HashMap          15.023  /   14.790  /   16.453    -     150.2 ms
  14: google/c-dense           15.270  /   15.223  /   15.341    -     152.7 ms
  15: libghthash/hashtable     17.652  /   17.550  /   18.036    -     176.5 ms
  16: klib/khash               20.568  /   19.794  /   23.503    -     205.7 ms
  17: apr/hashtable            20.049  /   19.950  /   20.142    -     200.5 ms
  18: Qt::QHash                21.128  /   20.858  /   22.658    -     211.3 ms
  19: libCDS/HashMap           23.014  /   22.631  /   25.069    -     230.1 ms
  20: python/hashtable         22.781  /   22.622  /   23.239    -     227.8 ms
  21: PeterMoore/st            22.693  /   22.548  /   22.932    -     226.9 ms
  22: uthash/hashtable         23.337  /   23.175  /   23.618    -     233.3 ms
  23: hashit/chain             23.384  /   21.781  /   24.257    -     233.8 ms
  24: ulib/open-hash           23.302  /   22.980  /   24.104    -     233.0 ms
  25: eastl::hashmap           24.110  /   22.592  /   29.517    -     241.1 ms
  26: calg/hashtable           23.773  /   23.675  /   24.216    -     237.7 ms
  27: std::unordered_map       24.746  /   23.978  /   29.786    -     247.4 ms
  28: mct::closed_hash_map     25.530  /   25.408  /   25.776    -     255.3 ms
  29: mct::linked_hash_map     25.329  /   24.482  /   25.667    -     253.3 ms
  30: rigtorp::hashmap         25.389  /   25.280  /   25.698    -     253.9 ms
  31: apr-no-pool/hashtable    26.144  /   25.871  /   27.955    -     261.4 ms
  32: clark/hashtable          26.367  /   26.182  /   26.950    -     263.6 ms
  33: ulib::chain-hash++       32.123  /   31.703  /   33.467    -     321.2 ms
  34: boost::unordered_map     34.235  /   33.702  /   34.599    -     342.3 ms
  35: stb/sdict                30.397  /   30.148  /   31.208    -     303.9 ms
  36: ulib::open-hash++        30.661  /   30.363  /   31.132    -     306.6 ms
  37: tbb::unordered_map       39.031  /   38.800  /   39.577    -     390.3 ms
  38: google/c-sparse          41.169  /   41.032  /   41.361    -     411.7 ms
  39: google::sparsehash       54.966  /   51.821  /   63.496    -     549.6 ms
  40: oddou::hashmap           52.723  /   52.366  /   53.321    -     527.2 ms
  41: libcfu/hashtable         78.036  /   66.107  /   98.471    -     780.4 ms

Running test [hit]. Please wait ...
  battle for 41: ulib::chain-hash++ too slow                                    
  battle for 40: libcfu/hashtable too slow                                    
  battle for 39: google::sparsehash too slow                                    
  battle for 38: tbb::unordered_map too slow                                    
  battle for 37: oddou::hashmap too slow                                    
  battle for 36: google/c-sparse too slow                                    
  battle for 35: ulib::open-hash++ too slow                                    
  battle for 34: boost::unordered_map too slow                                    
  battle for 33: stb/sdict too slow                                    
  battle for 32: hashit/chain too slow                                    
  battle for 31: rigtorp::hashmap too slow                                    
  battle for 30: clark/hashtable too slow                                    
  battle for 29: uthash/hashtable too slow                                    
  battle for 28: mct::linked_hash_map too slow                                    
  battle for 27: mct::closed_hash_map too slow                                    
  battle for 26: klib/khash too slow                                    
  battle for 25: apr-no-pool/hashtable too slow                                    
  battle for 24: std::unordered_map too slow                                    
  battle for 23: ulib/open-hash too slow                                    
  battle for 22: calg/hashtable too slow                                    
  battle for 21: PeterMoore/st too slow                                    
  battle for 20: hashit/open too slow                                    
  battle for 19: python/hashtable too slow                                    
  battle for 18: eastl::hashmap too slow                                    
  battle for 17: libCDS/HashMap too slow                                    
  battle for 16: Qt::QHash too slow                                    
  battle for 15: apr/hashtable too slow                                    
  battle for 14: google/c-dense too slow                                    
  battle for 13: libghthash/hashtable too slow                                    
  battle for 12: hashit/overflow too slow                                    
  battle for 11: amtl::hashmap too slow                                    
  battle for 10: emilib::HashMap too slow                                    
  battle for  9: tommyds/linear too slow                                    
  battle for  8: google::densehash too slow                                    
  battle for  7: tommyds/dynamic too slow                                    
  battle for  6: ulib/chain-hash too slow                                    
  battle for  5: rdestl::hash_map too slow                                    
  battle for  4: libevent/ht too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: glib/ghash too slow                                    
  winner is   1: ccan/htable

Results of test [hit] - 1e5 items (10 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: ccan/htable              11.751  /   11.685  /   11.968    -     117.5 ms
   2: glib/ghash               14.561  /   14.501  /   14.783    -     145.6 ms
   3: gcc/hashtab              18.353  /   18.072  /   18.697    -     183.5 ms
   4: libevent/ht              18.618  /   18.371  /   18.813    -     186.2 ms
   5: rdestl::hash_map         19.112  /   18.495  /   19.303    -     191.1 ms
   6: ulib/chain-hash          20.071  /   19.896  /   20.880    -     200.7 ms
   7: tommyds/dynamic          19.947  /   19.791  /   20.101    -     199.4 ms
   8: google::densehash        20.577  /   20.364  /   21.660    -     205.7 ms
   9: tommyds/linear           22.600  /   22.253  /   22.949    -     226.0 ms
  10: emilib::HashMap          20.395  /   20.104  /   22.297    -     203.9 ms
  11: amtl::hashmap            23.270  /   23.037  /   23.672    -     232.7 ms
  12: hashit/overflow          25.161  /   24.776  /   26.050    -     251.6 ms
  13: libghthash/hashtable     25.945  /   25.581  /   27.900    -     259.4 ms
  14: google/c-dense           26.082  /   25.979  /   26.204    -     260.8 ms
  15: apr/hashtable            28.556  /   28.005  /   29.202    -     285.5 ms
  16: Qt::QHash                29.335  /   28.908  /   30.313    -     293.3 ms
  17: libCDS/HashMap           30.011  /   29.579  /   30.505    -     300.1 ms
  18: eastl::hashmap           30.104  /   29.817  /   30.503    -     301.0 ms
  19: python/hashtable         30.205  /   29.878  /   30.755    -     302.0 ms
  20: hashit/open              30.305  /   30.059  /   31.044    -     303.0 ms
  21: PeterMoore/st            30.252  /   29.648  /   30.804    -     302.5 ms
  22: calg/hashtable           31.081  /   30.876  /   31.253    -     310.8 ms
  23: ulib/open-hash           32.363  /   32.067  /   32.660    -     323.6 ms
  24: std::unordered_map       34.133  /   33.737  /   35.301    -     341.3 ms
  25: apr-no-pool/hashtable    34.901  /   34.670  /   35.100    -     349.0 ms
  26: klib/khash               42.664  /   36.307  /   57.155    -     426.6 ms
  27: mct::closed_hash_map     35.989  /   34.721  /   36.617    -     359.9 ms
  28: mct::linked_hash_map     37.124  /   36.310  /   37.939    -     371.2 ms
  29: uthash/hashtable         39.945  /   39.454  /   41.902    -     399.4 ms
  30: clark/hashtable          65.510  /   50.392  /   87.103    -     655.1 ms
  31: rigtorp::hashmap         55.273  /   39.880  /   71.248    -     552.7 ms
  32: hashit/chain             55.258  /   40.694  /   66.441    -     552.6 ms
  33: stb/sdict                45.054  /   44.457  /   45.406    -     450.5 ms
  34: boost::unordered_map     45.667  /   44.928  /   47.721    -     456.6 ms
  35: ulib::open-hash++        52.357  /   47.042  /   68.254    -     523.6 ms
  36: google/c-sparse          47.103  /   46.525  /   48.469    -     471.0 ms
  37: oddou::hashmap           60.130  /   59.882  /   60.822    -     601.3 ms
  38: tbb::unordered_map       60.975  /   60.608  /   61.479    -     609.7 ms
  39: google::sparsehash       71.424  /   71.218  /   71.961    -     714.2 ms
  40: libcfu/hashtable         74.158  /   73.827  /   75.534    -     741.6 ms
  41: ulib::chain-hash++      156.693  /  154.845  /  161.020    -       1.5  s

Running test [miss]. Please wait ...
  battle for 41: libcfu/hashtable too slow                                    
  battle for 40: tbb::unordered_map too slow                                    
  battle for 39: google::sparsehash too slow                                    
  battle for 38: oddou::hashmap too slow                                    
  battle for 37: stb/sdict too slow                                    
  battle for 36: klib/khash too slow                                    
  battle for 35: google/c-sparse too slow                                    
  battle for 34: boost::unordered_map too slow                                    
  battle for 33: hashit/open too slow                                    
  battle for 32: hashit/chain too slow                                    
  battle for 31: uthash/hashtable too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: clark/hashtable too slow                                    
  battle for 28: std::unordered_map too slow                                    
  battle for 27: mct::closed_hash_map too slow                                    
  battle for 26: mct::linked_hash_map too slow                                    
  battle for 25: ulib/open-hash too slow                                    
  battle for 24: apr-no-pool/hashtable too slow                                    
  battle for 23: Qt::QHash too slow                                    
  battle for 22: calg/hashtable too slow                                    
  battle for 21: PeterMoore/st too slow                                    
  battle for 20: ulib::open-hash++ too slow                                    
  battle for 19: eastl::hashmap too slow                                    
  battle for 18: libCDS/HashMap too slow                                    
  battle for 17: python/hashtable too slow                                    
  battle for 16: hashit/overflow too slow                                    
  battle for 15: apr/hashtable too slow                                    
  battle for 14: libghthash/hashtable too slow                                    
  battle for 13: google/c-dense too slow                                    
  battle for 12: tommyds/linear too slow                                    
  battle for 11: amtl::hashmap too slow                                    
  battle for 10: ulib/chain-hash too slow                                    
  battle for  9: tommyds/dynamic too slow                                    
  battle for  8: ulib::chain-hash++ too slow                                    
  battle for  7: gcc/hashtab too slow                                    
  battle for  6: emilib::HashMap too slow                                    
  battle for  5: libevent/ht too slow                                    
  battle for  4: google::densehash too slow                                    
  battle for  3: rdestl::hash_map too slow                                    
  battle for  2: glib/ghash too slow                                    
  winner is   1: ccan/htable

Results of test [miss] - 1e5 items (10 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: ccan/htable              11.874  /   11.784  /   11.946    -     118.7 ms
   2: glib/ghash               16.144  /   16.047  /   16.228    -     161.4 ms
   3: rdestl::hash_map         18.638  /   17.892  /   19.210    -     186.4 ms
   4: google::densehash        19.207  /   19.024  /   20.003    -     192.0 ms
   5: libevent/ht              20.207  /   19.942  /   20.400    -     202.0 ms
   6: emilib::HashMap          20.893  /   20.783  /   21.075    -     208.9 ms
   7: gcc/hashtab              21.336  /   20.627  /   22.195    -     213.3 ms
   8: ulib::chain-hash++       21.548  /   21.178  /   22.129    -     215.5 ms
   9: tommyds/dynamic          21.920  /   21.815  /   22.012    -     219.2 ms
  10: ulib/chain-hash          23.323  /   23.005  /   23.594    -     233.2 ms
  11: amtl::hashmap            23.996  /   23.507  /   24.755    -     239.9 ms
  12: tommyds/linear           24.248  /   23.991  /   24.433    -     242.5 ms
  13: google/c-dense           26.116  /   25.665  /   28.891    -     261.1 ms
  14: libghthash/hashtable     27.217  /   26.963  /   27.559    -     272.2 ms
  15: apr/hashtable            27.994  /   27.656  /   28.599    -     279.9 ms
  16: hashit/overflow          29.159  /   28.418  /   29.725    -     291.6 ms
  17: python/hashtable         30.210  /   29.747  /   30.723    -     302.1 ms
  18: libCDS/HashMap           30.258  /   30.080  /   30.748    -     302.6 ms
  19: eastl::hashmap           31.640  /   31.401  /   31.918    -     316.4 ms
  20: ulib::open-hash++        31.858  /   31.518  /   32.110    -     318.6 ms
  21: PeterMoore/st            32.213  /   31.643  /   32.639    -     322.1 ms
  22: calg/hashtable           32.969  /   32.735  /   33.150    -     329.7 ms
  23: Qt::QHash                34.232  /   33.688  /   35.976    -     342.3 ms
  24: apr-no-pool/hashtable    35.082  /   34.864  /   35.420    -     350.8 ms
  25: ulib/open-hash           34.961  /   34.488  /   36.883    -     349.6 ms
  26: mct::linked_hash_map     38.851  /   37.308  /   40.061    -     388.5 ms
  27: mct::closed_hash_map     38.807  /   38.502  /   39.143    -     388.1 ms
  28: std::unordered_map       37.928  /   37.481  /   39.056    -     379.3 ms
  29: clark/hashtable          41.048  /   40.930  /   41.316    -     410.5 ms
  30: rigtorp::hashmap         43.864  /   41.867  /   52.275    -     438.6 ms
  31: uthash/hashtable         44.447  /   43.970  /   45.143    -     444.5 ms
  32: hashit/chain             45.722  /   42.774  /   48.420    -     457.2 ms
  33: hashit/open              81.188  /   65.301  /   96.398    -     811.9 ms
  34: boost::unordered_map     50.195  /   48.883  /   56.593    -     501.9 ms
  35: google/c-sparse          45.544  /   45.219  /   46.104    -     455.4 ms
  36: klib/khash               48.444  /   47.857  /   49.435    -     484.4 ms
  37: stb/sdict                53.725  /   52.994  /   54.133    -     537.2 ms
  38: oddou::hashmap           62.282  /   62.077  /   62.656    -     622.8 ms
  39: google::sparsehash       64.463  /   64.164  /   65.141    -     644.6 ms
  40: tbb::unordered_map       69.206  /   68.389  /   69.543    -     692.0 ms
  41: libcfu/hashtable        115.593  /   90.359  /  131.208    -       1.1  s

Running test [delete]. Please wait ...
  battle for 41: ulib::chain-hash++ too slow                                    
  battle for 40: stb/sdict too slow                                    
  battle for 39: tbb::unordered_map too slow                                    
  battle for 38: oddou::hashmap too slow                                    
  battle for 37: libcfu/hashtable too slow                                    
  battle for 36: google::sparsehash too slow                                    
  battle for 35: google/c-sparse too slow                                    
  battle for 34: hashit/open too slow                                    
  battle for 33: boost::unordered_map too slow                                    
  battle for 32: rigtorp::hashmap too slow                                    
  battle for 31: ulib::open-hash++ too slow                                    
  battle for 30: mct::linked_hash_map too slow                                    
  battle for 29: uthash/hashtable too slow                                    
  battle for 28: std::unordered_map too slow                                    
  battle for 27: clark/hashtable too slow                                    
  battle for 26: mct::closed_hash_map too slow                                    
  battle for 25: google/c-dense too slow                                    
  battle for 24: ulib/open-hash too slow                                    
  battle for 23: Qt::QHash too slow                                    
  battle for 22: PeterMoore/st too slow                                    
  battle for 21: python/hashtable too slow                                    
  battle for 20: calg/hashtable too slow                                    
  battle for 19: klib/khash too slow                                    
  battle for 18: hashit/chain too slow                                    
  battle for 17: eastl::hashmap too slow                                    
  battle for 16: libCDS/HashMap too slow                                    
  battle for 15: amtl::hashmap too slow                                    
  battle for 14: google::densehash too slow                                    
  battle for 13: emilib::HashMap too slow                                    
  battle for 12: libevent/ht too slow                                    
  battle for 11: hashit/overflow too slow                                    
  battle for 10: libghthash/hashtable too slow                                    
  battle for  9: tommyds/linear too slow                                    
  battle for  8: rdestl::hash_map too slow                                    
  battle for  7: tommyds/dynamic too slow                                    
  battle for  6: apr-no-pool/hashtable too slow                                    
  battle for  5: apr/hashtable too slow                                    
  battle for  4: glib/ghash too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: ccan/htable

Results of test [delete] - 1e5 items (10 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: ccan/htable              12.983  /   12.900  /   13.189    -     129.8 ms
   2: gcc/hashtab              13.445  /   13.401  /   13.681    -     134.4 ms
   3: ulib/chain-hash          14.527  /   14.431  /   14.758    -     145.2 ms
   4: glib/ghash               15.408  /   15.340  /   15.499    -     154.0 ms
   5: apr/hashtable            16.657  /   16.349  /   16.963    -     166.6 ms
   6: apr-no-pool/hashtable    17.120  /   17.072  /   17.301    -     171.2 ms
   7: tommyds/dynamic          17.141  /   17.034  /   17.363    -     171.4 ms
   8: rdestl::hash_map         18.135  /   17.359  /   18.525    -     181.3 ms
   9: tommyds/linear           18.404  /   18.291  /   18.709    -     184.0 ms
  10: libghthash/hashtable     18.438  /   18.253  /   19.704    -     184.4 ms
  11: hashit/overflow          18.776  /   18.591  /   19.483    -     187.7 ms
  12: libevent/ht              19.062  /   18.976  /   19.238    -     190.6 ms
  13: emilib::HashMap          19.517  /   19.239  /   20.935    -     195.1 ms
  14: google::densehash        20.054  /   19.925  /   20.429    -     200.5 ms
  15: amtl::hashmap            21.663  /   21.279  /   21.970    -     216.6 ms
  16: libCDS/HashMap           24.671  /   24.355  /   26.057    -     246.7 ms
  17: eastl::hashmap           25.478  /   25.341  /   25.905    -     254.8 ms
  18: hashit/chain             30.518  /   29.490  /   31.061    -     305.2 ms
  19: klib/khash               28.110  /   27.776  /   28.549    -     281.1 ms
  20: calg/hashtable           27.551  /   27.301  /   28.351    -     275.5 ms
  21: python/hashtable         28.080  /   27.840  /   28.378    -     280.8 ms
  22: PeterMoore/st            28.069  /   28.012  /   28.172    -     280.7 ms
  23: Qt::QHash                26.538  /   26.295  /   27.201    -     265.4 ms
  24: ulib/open-hash           28.521  /   28.329  /   29.108    -     285.2 ms
  25: google/c-dense           30.158  /   29.982  /   30.908    -     301.6 ms
  26: mct::closed_hash_map     31.366  /   31.159  /   31.625    -     313.6 ms
  27: clark/hashtable          31.804  /   31.392  /   33.800    -     318.0 ms
  28: std::unordered_map       32.024  /   31.885  /   32.349    -     320.2 ms
  29: uthash/hashtable         34.205  /   33.857  /   34.508    -     342.0 ms
  30: mct::linked_hash_map     34.136  /   32.805  /   34.629    -     341.3 ms
  31: ulib::open-hash++        40.334  /   40.195  /   41.036    -     403.3 ms
  32: rigtorp::hashmap         43.310  /   43.149  /   43.579    -     433.1 ms
  33: boost::unordered_map     41.662  /   41.380  /   42.090    -     416.6 ms
  34: hashit/open              57.959  /   56.681  /   58.724    -     579.6 ms
  35: google/c-sparse          61.847  /   61.633  /   62.509    -     618.4 ms
  36: google::sparsehash       70.884  /   70.703  /   71.157    -     708.8 ms
  37: libcfu/hashtable         71.584  /   70.809  /   72.306    -     715.8 ms
  38: oddou::hashmap           84.275  /   84.093  /   84.626    -     842.7 ms
  39: tbb::unordered_map       86.373  /   85.964  /   86.894    -     863.7 ms
  40: stb/sdict                94.111  /   93.391  /   94.508    -     941.1 ms
  41: ulib::chain-hash++      156.052  /  152.624  /  160.405    -       1.5  s

Running test [replace]. Please wait ...
  battle for 41: hashit/overflow too slow                                    
  battle for 40: ulib::chain-hash++ too slow                                    
  battle for 39: hashit/open too slow                                    
  battle for 38: stb/sdict too slow                                    
  battle for 37: google::sparsehash too slow                                    
  battle for 36: tbb::unordered_map too slow                                    
  battle for 35: google/c-sparse too slow                                    
  battle for 34: oddou::hashmap too slow                                    
  battle for 33: libcfu/hashtable too slow                                    
  battle for 32: rigtorp::hashmap too slow                                    
  battle for 31: boost::unordered_map too slow                                    
  battle for 30: uthash/hashtable too slow                                    
  battle for 29: ulib::open-hash++ too slow                                    
  battle for 28: PeterMoore/st too slow                                    
  battle for 27: clark/hashtable too slow                                    
  battle for 26: hashit/chain too slow                                    
  battle for 25: mct::closed_hash_map too slow                                    
  battle for 24: mct::linked_hash_map too slow                                    
  battle for 23: std::unordered_map too slow                                    
  battle for 22: klib/khash too slow                                    
  battle for 21: google/c-dense too slow                                    
  battle for 20: ulib/open-hash too slow                                    
  battle for 19: google::densehash too slow                                    
  battle for 18: calg/hashtable too slow                                    
  battle for 17: eastl::hashmap too slow                                    
  battle for 16: apr-no-pool/hashtable too slow                                    
  battle for 15: Qt::QHash too slow                                    
  battle for 14: ulib/chain-hash too slow                                    
  battle for 13: libghthash/hashtable too slow                                    
  battle for 12: amtl::hashmap too slow                                    
  battle for 11: libCDS/HashMap too slow                                    
  battle for 10: glib/ghash too slow                                    
  battle for  9: python/hashtable too slow                                    
  battle for  8: apr/hashtable too slow                                    
  battle for  7: emilib::HashMap too slow                                    
  battle for  6: gcc/hashtab too slow                                    
  battle for  5: tommyds/linear too slow                                    
  battle for  4: libevent/ht too slow                                    
  battle for  3: rdestl::hash_map too slow                                    
  battle for  2: tommyds/dynamic too slow                                    
  winner is   1: ccan/htable

Results of test [replace] - 1e5 items (10 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: ccan/htable              25.259  /   25.136  /   25.464    -     252.6 ms
   2: tommyds/dynamic          27.128  /   27.064  /   27.251    -     271.3 ms
   3: rdestl::hash_map         35.076  /   30.228  /   42.298    -     350.7 ms
   4: libevent/ht              31.662  /   31.521  /   31.792    -     316.6 ms
   5: tommyds/linear           37.102  /   32.336  /   48.498    -     371.0 ms
   6: gcc/hashtab              51.589  /   37.688  /   63.171    -     515.9 ms
   7: emilib::HashMap          36.605  /   36.543  /   36.872    -     366.0 ms
   8: apr/hashtable            45.007  /   36.005  /   56.655    -     450.1 ms
   9: python/hashtable         40.545  /   39.718  /   41.005    -     405.4 ms
  10: glib/ghash               44.284  /   38.014  /   54.176    -     442.8 ms
  11: libCDS/HashMap           39.196  /   39.059  /   39.610    -     391.9 ms
  12: amtl::hashmap            43.092  /   40.054  /   51.455    -     430.9 ms
  13: libghthash/hashtable     45.453  /   44.924  /   47.735    -     454.5 ms
  14: ulib/chain-hash          53.469  /   47.749  /   60.815    -     534.7 ms
  15: Qt::QHash                70.166  /   61.833  /   87.493    -     701.7 ms
  16: apr-no-pool/hashtable    47.758  /   43.849  /   64.305    -     477.6 ms
  17: eastl::hashmap           44.911  /   42.708  /   48.988    -     449.1 ms
  18: calg/hashtable           54.578  /   49.894  /   62.912    -     545.8 ms
  19: google::densehash        50.377  /   48.832  /   50.842    -     503.8 ms
  20: ulib/open-hash           56.176  /   54.932  /   59.602    -     561.7 ms
  21: google/c-dense           54.890  /   53.613  /   58.741    -     548.9 ms
  22: klib/khash               55.915  /   54.456  /   59.029    -     559.1 ms
  23: std::unordered_map       72.733  /   64.630  /   95.600    -     727.3 ms
  24: mct::linked_hash_map     70.302  /   65.388  /   76.525    -     703.0 ms
  25: mct::closed_hash_map     70.521  /   68.194  /   74.181    -     705.2 ms
  26: hashit/chain             72.057  /   71.441  /   73.553    -     720.6 ms
  27: clark/hashtable          71.013  /   66.973  /   85.918    -     710.1 ms
  28: PeterMoore/st            86.765  /   71.448  /  109.747    -     867.7 ms
  29: ulib::open-hash++        64.281  /   63.754  /   66.058    -     642.8 ms
  30: uthash/hashtable         75.333  /   74.199  /   76.512    -     753.3 ms
  31: boost::unordered_map     83.917  /   83.489  /   84.396    -     839.2 ms
  32: rigtorp::hashmap         88.891  /   88.575  /   89.351    -     888.9 ms
  33: libcfu/hashtable        101.208  /  100.469  /  103.377    -       1.0  s
  34: oddou::hashmap          101.822  /  101.563  /  102.434    -       1.0  s
  35: google/c-sparse         102.606  /  101.703  /  104.192    -       1.0  s
  36: tbb::unordered_map      136.922  /  132.267  /  153.984    -       1.3  s
  37: google::sparsehash      153.332  /  152.802  /  154.421    -       1.5  s
  38: stb/sdict               163.648  /  163.108  /  165.032    -       1.6  s
  39: hashit/open             211.767  /  208.024  /  230.082    -       2.1  s
  40: ulib::chain-hash++      527.064  /  523.864  /  533.972    -       5.2  s
  41: hashit/overflow         820.301  /  819.856  /  821.776    -       8.2  s

Running test [kbench]. Please wait ...
  battle for 41: ulib::chain-hash++ too slow                                    
  battle for 40: stb/sdict too slow                                    
  battle for 39: tbb::unordered_map too slow                                    
  battle for 38: oddou::hashmap too slow                                    
  battle for 37: google::sparsehash too slow                                    
  battle for 36: google/c-sparse too slow                                    
  battle for 35: libcfu/hashtable too slow                                    
  battle for 34: hashit/open too slow                                    
  battle for 33: ulib::open-hash++ too slow                                    
  battle for 32: boost::unordered_map too slow                                    
  battle for 31: rigtorp::hashmap too slow                                    
  battle for 30: mct::linked_hash_map too slow                                    
  battle for 29: uthash/hashtable too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: clark/hashtable too slow                                    
  battle for 26: std::unordered_map too slow                                    
  battle for 25: ulib/open-hash too slow                                    
  battle for 24: google/c-dense too slow                                    
  battle for 23: klib/khash too slow                                    
  battle for 22: calg/hashtable too slow                                    
  battle for 21: python/hashtable too slow                                    
  battle for 20: hashit/chain too slow                                    
  battle for 19: PeterMoore/st too slow                                    
  battle for 18: hashit/overflow too slow                                    
  battle for 17: amtl::hashmap too slow                                    
  battle for 16: eastl::hashmap too slow                                    
  battle for 15: libCDS/HashMap too slow                                    
  battle for 14: Qt::QHash too slow                                    
  battle for 13: tommyds/linear too slow                                    
  battle for 12: tommyds/dynamic too slow                                    
  battle for 11: libevent/ht too slow                                    
  battle for 10: google::densehash too slow                                    
  battle for  9: emilib::HashMap too slow                                    
  battle for  8: libghthash/hashtable too slow                                    
  battle for  7: rdestl::hash_map too slow                                    
  battle for  6: apr-no-pool/hashtable too slow                                    
  battle for  5: apr/hashtable too slow                                    
  battle for  4: glib/ghash too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: ulib/chain-hash too slow                                    
  winner is   1: ccan/htable

Results of test [kbench] - 1e5 items (10 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: ccan/htable              15.664  /   15.561  /   15.793    -     156.6 ms
   2: ulib/chain-hash          16.946  /   16.755  /   17.141    -     169.4 ms
   3: gcc/hashtab              17.750  /   17.554  /   17.988    -     177.5 ms
   4: glib/ghash               18.346  /   18.303  /   18.436    -     183.4 ms
   5: apr/hashtable            19.080  /   18.819  /   19.334    -     190.8 ms
   6: apr-no-pool/hashtable    19.277  /   19.176  /   19.550    -     192.8 ms
   7: rdestl::hash_map         21.021  /   20.694  /   21.294    -     210.2 ms
   8: libghthash/hashtable     21.072  /   20.852  /   22.657    -     210.7 ms
   9: emilib::HashMap          21.763  /   21.662  /   21.959    -     217.6 ms
  10: google::densehash        22.452  /   22.384  /   22.512    -     224.5 ms
  11: libevent/ht              22.362  /   22.204  /   22.543    -     223.6 ms
  12: tommyds/dynamic          24.529  /   24.162  /   25.280    -     245.3 ms
  13: tommyds/linear           25.660  /   25.502  /   25.857    -     256.6 ms
  14: Qt::QHash                26.707  /   26.508  /   27.010    -     267.0 ms
  15: libCDS/HashMap           27.514  /   27.340  /   27.798    -     275.1 ms
  16: eastl::hashmap           28.293  /   28.047  /   29.247    -     282.9 ms
  17: amtl::hashmap            29.131  /   28.257  /   29.608    -     291.3 ms
  18: hashit/overflow          28.348  /   28.063  /   28.573    -     283.5 ms
  19: PeterMoore/st            29.521  /   29.385  /   29.623    -     295.2 ms
  20: hashit/chain             31.967  /   31.496  /   32.490    -     319.6 ms
  21: python/hashtable         29.490  /   29.045  /   29.914    -     294.9 ms
  22: calg/hashtable           30.193  /   30.034  /   30.480    -     301.9 ms
  23: klib/khash               29.856  /   29.646  /   30.090    -     298.5 ms
  24: google/c-dense           32.160  /   32.068  /   32.243    -     321.6 ms
  25: ulib/open-hash           32.701  /   32.440  /   32.859    -     327.0 ms
  26: std::unordered_map       36.083  /   35.947  /   36.265    -     360.8 ms
  27: clark/hashtable          37.390  /   37.177  /   37.743    -     373.9 ms
  28: mct::closed_hash_map     40.066  /   39.457  /   40.399    -     400.6 ms
  29: uthash/hashtable         40.319  /   39.829  /   41.018    -     403.2 ms
  30: mct::linked_hash_map     42.657  /   40.351  /   43.577    -     426.6 ms
  31: rigtorp::hashmap         44.736  /   44.644  /   44.816    -     447.3 ms
  32: boost::unordered_map     48.011  /   47.218  /   48.788    -     480.1 ms
  33: ulib::open-hash++        50.033  /   49.735  /   50.840    -     500.3 ms
  34: hashit/open              54.596  /   54.407  /   54.893    -     545.9 ms
  35: libcfu/hashtable         76.517  /   74.121  /   88.002    -     765.2 ms
  36: google/c-sparse          81.824  /   66.762  /  112.130    -     818.2 ms
  37: google::sparsehash      108.182  /   95.859  /  116.116    -       1.0  s
  38: oddou::hashmap           89.766  /   89.462  /   90.997    -     897.6 ms
  39: tbb::unordered_map       96.715  /   96.491  /   96.927    -     967.1 ms
  40: stb/sdict               116.753  /  101.116  /  154.724    -       1.1  s
  41: ulib::chain-hash++      306.120  /  266.451  /  343.783    -       3.0  s
