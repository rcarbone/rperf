Linux nuc 3.2.0-4-amd64 #1 SMP Debian 3.2.88-1 x86_64

Running test [grow]. Please wait ...
  battle for 26: oddou::hashmap too slow                                    
  battle for 25: google::sparsehash too slow                                    
  battle for 24: google::densehash too slow                                    
  battle for 23: ulib::open-hash++ too slow                                    
  battle for 22: libcfu/hashtable too slow                                    
  battle for 21: mct::linked_hash_map too slow                                    
  battle for 20: rigtorp::hashmap too slow                                    
  battle for 19: boost::unordered_map too slow                                    
  battle for 18: mct::closed_hash_map too slow                                    
  battle for 17: google/c-sparse too slow                                    
  battle for 16: std::unordered_map too slow                                    
  battle for 15: amtl/hashmap too slow                                    
  battle for 14: google/c-dense too slow                                    
  battle for 13: ulib/open-hash too slow                                    
  battle for 12: klib/khash too slow                                    
  battle for 11: my-apr/hashtable too slow                                    
  battle for 10: rdestl::hash_map too slow                                    
  battle for  9: python/hashtable too slow                                    
  battle for  8: hashit/chain too slow                                    
  battle for  7: apr/hashtable too slow                                    
  battle for  6: ulib::chain-hash++ too slow                                    
  battle for  5: hashit/open too slow                                    
  battle for  4: hashit/overflow too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: glib/ghash

Results of test [grow] - 1e5 items (5 loops per test)
      Implementation       -   avg         min         max   ms -   elapsed
   1: glib/ghash              10.456  /   10.415  /   10.527    -      52.2 ms
   2: gcc/hashtab             12.331  /   12.274  /   12.403    -      61.6 ms
   3: ulib/chain-hash         19.964  /   19.797  /   20.181    -      99.8 ms
   4: hashit/overflow         20.531  /   20.391  /   20.610    -     102.6 ms
   5: hashit/open             23.144  /   23.136  /   23.155    -     115.7 ms
   6: ulib::chain-hash++      25.071  /   22.903  /   26.466    -     125.3 ms
   7: apr/hashtable           26.247  /   26.163  /   26.427    -     131.2 ms
   8: hashit/chain            30.597  /   30.025  /   31.203    -     152.9 ms
   9: python/hashtable        33.319  /   33.216  /   33.386    -     166.6 ms
  10: rdestl::hash_map        34.544  /   34.420  /   34.699    -     172.7 ms
  11: my-apr/hashtable        37.899  /   37.867  /   37.965    -     189.5 ms
  12: klib/khash              38.960  /   38.900  /   39.022    -     194.8 ms
  13: ulib/open-hash          43.030  /   42.912  /   43.366    -     215.1 ms
  14: google/c-dense          43.073  /   42.928  /   43.347    -     215.3 ms
  15: amtl/hashmap            52.306  /   51.967  /   53.004    -     261.5 ms
  16: std::unordered_map      63.142  /   62.707  /   63.326    -     315.7 ms
  17: google/c-sparse         66.113  /   65.934  /   66.248    -     330.5 ms
  18: mct::closed_hash_map    73.004  /   72.552  /   74.231    -     365.0 ms
  19: boost::unordered_map    74.610  /   74.477  /   74.874    -     373.0 ms
  20: rigtorp::hashmap        77.317  /   77.193  /   77.639    -     386.5 ms
  21: mct::linked_hash_map    84.209  /   80.149  /   93.003    -     421.0 ms
  22: libcfu/hashtable        89.070  /   84.504  /   93.479    -     445.3 ms
  23: ulib::open-hash++       87.410  /   86.976  /   88.043    -     437.0 ms
  24: google::densehash      131.317  /  131.107  /  131.686    -     656.6 ms
  25: google::sparsehash     498.422  /  335.859  /  620.273    -       2.4 s 
  26: oddou::hashmap         666.091  /  647.115  /  691.918    -       3.3 s 

Running test [hit]. Please wait ...
  battle for 26: oddou::hashmap too slow                                    
  battle for 25: google::sparsehash too slow                                    
  battle for 24: ulib::chain-hash++ too slow                                    
  battle for 23: google::densehash too slow                                    
  battle for 22: ulib::open-hash++ too slow                                    
  battle for 21: boost::unordered_map too slow                                    
  battle for 20: rigtorp::hashmap too slow                                    
  battle for 19: mct::linked_hash_map too slow                                    
  battle for 18: mct::closed_hash_map too slow                                    
  battle for 17: std::unordered_map too slow                                    
  battle for 16: libcfu/hashtable too slow                                    
  battle for 15: google/c-sparse too slow                                    
  battle for 14: amtl/hashmap too slow                                    
  battle for 13: klib/khash too slow                                    
  battle for 12: ulib/open-hash too slow                                    
  battle for 11: google/c-dense too slow                                    
  battle for 10: hashit/chain too slow                                    
  battle for  9: rdestl::hash_map too slow                                    
  battle for  8: hashit/open too slow                                    
  battle for  7: my-apr/hashtable too slow                                    
  battle for  6: hashit/overflow too slow                                    
  battle for  5: python/hashtable too slow                                    
  battle for  4: apr/hashtable too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: glib/ghash

Results of test [hit] - 1e5 items (5 loops per test)
      Implementation       -   avg         min         max   ms -   elapsed
   1: glib/ghash              16.674  /   16.656  /   16.703    -      83.3 ms
   2: gcc/hashtab             28.262  /   28.131  /   28.461    -     141.3 ms
   3: ulib/chain-hash         28.957  /   28.838  /   29.100    -     144.8 ms
   4: apr/hashtable           36.154  /   35.981  /   36.426    -     180.7 ms
   5: python/hashtable        42.858  /   42.579  /   43.084    -     214.3 ms
   6: hashit/overflow         43.575  /   42.112  /   44.938    -     217.8 ms
   7: my-apr/hashtable        47.910  /   47.776  /   48.248    -     239.5 ms
   8: hashit/open             51.611  /   51.513  /   51.818    -     258.0 ms
   9: rdestl::hash_map        52.582  /   51.664  /   52.854    -     262.9 ms
  10: hashit/chain            52.776  /   52.217  /   53.422    -     263.8 ms
  11: google/c-dense          56.887  /   56.632  /   57.664    -     284.4 ms
  12: ulib/open-hash          57.893  /   57.789  /   58.122    -     289.4 ms
  13: klib/khash              60.804  /   60.695  /   60.915    -     304.0 ms
  14: amtl/hashmap            75.532  /   74.204  /   75.924    -     377.6 ms
  15: google/c-sparse         83.777  /   83.428  /   84.494    -     418.8 ms
  16: libcfu/hashtable        90.321  /   90.046  /   90.788    -     451.6 ms
  17: std::unordered_map      94.307  /   93.510  /   96.442    -     471.5 ms
  18: mct::closed_hash_map    96.871  /   96.037  /   99.569    -     484.3 ms
  19: mct::linked_hash_map   103.578  /  102.315  /  104.033    -     517.9 ms
  20: rigtorp::hashmap       108.588  /  108.472  /  108.680    -     542.9 ms
  21: boost::unordered_map   108.876  /  108.248  /  110.641    -     544.3 ms
  22: ulib::open-hash++      122.814  /  122.460  /  123.848    -     614.0 ms
  23: google::densehash      181.233  /  180.684  /  182.922    -     906.1 ms
  24: ulib::chain-hash++     188.715  /  186.315  /  191.693    -     943.5 ms
  25: google::sparsehash     494.636  /  493.934  /  495.321    -       2.4 s 
  26: oddou::hashmap         709.782  /  709.508  /  710.406    -       3.5 s 

Running test [miss]. Please wait ...
  battle for 26: oddou::hashmap too slow                                    
  battle for 25: google::sparsehash too slow                                    
  battle for 24: google::densehash too slow                                    
  battle for 23: rigtorp::hashmap too slow                                    
  battle for 22: boost::unordered_map too slow                                    
  battle for 21: mct::linked_hash_map too slow                                    
  battle for 20: mct::closed_hash_map too slow                                    
  battle for 19: libcfu/hashtable too slow                                    
  battle for 18: ulib::open-hash++ too slow                                    
  battle for 17: std::unordered_map too slow                                    
  battle for 16: klib/khash too slow                                    
  battle for 15: google/c-sparse too slow                                    
  battle for 14: amtl/hashmap too slow                                    
  battle for 13: hashit/open too slow                                    
  battle for 12: hashit/chain too slow                                    
  battle for 11: ulib/open-hash too slow                                    
  battle for 10: google/c-dense too slow                                    
  battle for  9: rdestl::hash_map too slow                                    
  battle for  8: my-apr/hashtable too slow                                    
  battle for  7: hashit/overflow too slow                                    
  battle for  6: python/hashtable too slow                                    
  battle for  5: apr/hashtable too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: ulib::chain-hash++ too slow                                    
  winner is   1: glib/ghash

Results of test [miss] - 1e5 items (5 loops per test)
      Implementation       -   avg         min         max   ms -   elapsed
   1: glib/ghash              18.107  /   17.940  /   18.691    -      90.5 ms
   2: ulib::chain-hash++      30.109  /   29.898  /   30.253    -     150.5 ms
   3: gcc/hashtab             32.444  /   32.315  /   32.571    -     162.2 ms
   4: ulib/chain-hash         32.615  /   32.563  /   32.763    -     163.0 ms
   5: apr/hashtable           37.047  /   36.965  /   37.109    -     185.2 ms
   6: python/hashtable        43.267  /   43.135  /   43.446    -     216.3 ms
   7: hashit/overflow         48.454  /   48.253  /   48.637    -     242.2 ms
   8: my-apr/hashtable        49.353  /   49.197  /   49.508    -     246.7 ms
   9: rdestl::hash_map        51.620  /   50.903  /   51.851    -     258.1 ms
  10: google/c-dense          59.457  /   59.035  /   60.049    -     297.2 ms
  11: ulib/open-hash          61.462  /   61.389  /   61.522    -     307.3 ms
  12: hashit/chain            63.550  /   62.982  /   64.665    -     317.7 ms
  13: hashit/open             71.618  /   71.299  /   72.082    -     358.1 ms
  14: amtl/hashmap            73.418  /   72.262  /   73.767    -     367.1 ms
  15: google/c-sparse         79.396  /   79.218  /   79.778    -     396.9 ms
  16: klib/khash              88.718  /   88.352  /   89.044    -     443.6 ms
  17: std::unordered_map      93.055  /   92.662  /   93.254    -     465.2 ms
  18: ulib::open-hash++       94.948  /   94.878  /   95.102    -     474.7 ms
  19: libcfu/hashtable       100.107  /   99.980  /  100.226    -     500.5 ms
  20: mct::closed_hash_map   102.723  /  102.243  /  103.832    -     513.6 ms
  21: mct::linked_hash_map   111.279  /  109.138  /  111.884    -     556.4 ms
  22: boost::unordered_map   112.806  /  112.342  /  113.299    -     564.0 ms
  23: rigtorp::hashmap       122.249  /  121.844  /  122.834    -     611.2 ms
  24: google::densehash      158.636  /  158.144  /  160.373    -     793.1 ms
  25: google::sparsehash     467.226  /  466.355  /  468.915    -       2.3 s 
  26: oddou::hashmap         744.826  /  744.063  /  746.855    -       3.7 s 

Running test [delete]. Please wait ...
  battle for 26: oddou::hashmap too slow                                    
  battle for 25: google::sparsehash too slow                                    
  battle for 24: ulib::chain-hash++ too slow                                    
  battle for 23: google::densehash too slow                                    
  battle for 22: rigtorp::hashmap too slow                                    
  battle for 21: ulib::open-hash++ too slow                                    
  battle for 20: google/c-sparse too slow                                    
  battle for 19: boost::unordered_map too slow                                    
  battle for 18: mct::linked_hash_map too slow                                    
  battle for 17: mct::closed_hash_map too slow                                    
  battle for 16: hashit/open too slow                                    
  battle for 15: std::unordered_map too slow                                    
  battle for 14: libcfu/hashtable too slow                                    
  battle for 13: amtl/hashmap too slow                                    
  battle for 12: google/c-dense too slow                                    
  battle for 11: ulib/open-hash too slow                                    
  battle for 10: klib/khash too slow                                    
  battle for  9: rdestl::hash_map too slow                                    
  battle for  8: python/hashtable too slow                                    
  battle for  7: hashit/chain too slow                                    
  battle for  6: hashit/overflow too slow                                    
  battle for  5: my-apr/hashtable too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [delete] - 1e5 items (5 loops per test)
      Implementation       -   avg         min         max   ms -   elapsed
   1: glib/ghash              18.622  /   18.534  /   18.729    -      93.1 ms
   2: apr/hashtable           21.948  /   21.536  /   22.276    -     109.7 ms
   3: gcc/hashtab             25.076  /   24.560  /   25.432    -     125.3 ms
   4: ulib/chain-hash         25.666  /   24.989  /   26.355    -     128.3 ms
   5: my-apr/hashtable        31.649  /   31.064  /   32.805    -     158.2 ms
   6: hashit/overflow         43.103  /   42.326  /   43.666    -     215.5 ms
   7: hashit/chain            46.253  /   43.443  /   50.081    -     231.2 ms
   8: python/hashtable        47.012  /   46.732  /   47.376    -     235.0 ms
   9: rdestl::hash_map        53.924  /   52.961  /   54.493    -     269.6 ms
  10: klib/khash              60.185  /   57.459  /   64.445    -     300.9 ms
  11: ulib/open-hash          59.166  /   58.509  /   60.461    -     295.8 ms
  12: google/c-dense          86.263  /   84.604  /   87.421    -     431.3 ms
  13: amtl/hashmap            85.643  /   84.199  /   86.226    -     428.2 ms
  14: libcfu/hashtable        89.475  /   87.432  /   92.587    -     447.3 ms
  15: std::unordered_map      96.292  /   95.746  /   97.222    -     481.4 ms
  16: hashit/open            102.014  /  101.753  /  102.368    -     510.0 ms
  17: mct::closed_hash_map   101.862  /  100.523  /  104.249    -     509.3 ms
  18: mct::linked_hash_map   110.978  /  110.115  /  112.774    -     554.9 ms
  19: boost::unordered_map   122.489  /  117.322  /  138.261    -     612.4 ms
  20: google/c-sparse        120.193  /  119.752  /  120.719    -     600.9 ms
  21: ulib::open-hash++      122.540  /  119.406  /  133.319    -     612.7 ms
  22: rigtorp::hashmap       179.589  /  141.249  /  210.767    -     897.9 ms
  23: google::densehash      199.717  /  199.570  /  199.885    -     998.5 ms
  24: ulib::chain-hash++     202.446  /  197.864  /  207.062    -       1.0 s 
  25: google::sparsehash     559.888  /  559.530  /  560.542    -       2.7 s 
  26: oddou::hashmap        1069.592  / 1069.126  / 1070.408    -       5.3 s 

Running test [replace]. Please wait ...
  battle for 26: hashit/overflow too slow                                    
  battle for 25: google::sparsehash too slow                                    
  battle for 24: oddou::hashmap too slow                                    
  battle for 23: ulib::chain-hash++ too slow                                    
  battle for 22: google::densehash too slow                                    
  battle for 21: hashit/open too slow                                    
  battle for 20: rigtorp::hashmap too slow                                    
  battle for 19: boost::unordered_map too slow                                    
  battle for 18: ulib::open-hash++ too slow                                    
  battle for 17: mct::linked_hash_map too slow                                    
  battle for 16: google/c-sparse too slow                                    
  battle for 15: mct::closed_hash_map too slow                                    
  battle for 14: std::unordered_map too slow                                    
  battle for 13: google/c-dense too slow                                    
  battle for 12: libcfu/hashtable too slow                                    
  battle for 11: amtl/hashmap too slow                                    
  battle for 10: hashit/chain too slow                                    
  battle for  9: klib/khash too slow                                    
  battle for  8: ulib/open-hash too slow                                    
  battle for  7: rdestl::hash_map too slow                                    
  battle for  6: my-apr/hashtable too slow                                    
  battle for  5: python/hashtable too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [replace] - 1e5 items (5 loops per test)
      Implementation       -   avg         min         max   ms -   elapsed
   1: glib/ghash              43.999  /   43.636  /   44.433    -     220.0 ms
   2: apr/hashtable           51.753  /   51.438  /   52.161    -     258.7 ms
   3: gcc/hashtab             68.387  /   68.031  /   68.628    -     341.9 ms
   4: ulib/chain-hash         71.084  /   70.689  /   71.443    -     355.4 ms
   5: python/hashtable        72.283  /   71.511  /   72.710    -     361.4 ms
   6: my-apr/hashtable        75.151  /   74.335  /   75.790    -     375.7 ms
   7: rdestl::hash_map       103.435  /  101.578  /  104.254    -     517.1 ms
   8: ulib/open-hash         106.102  /  105.206  /  108.128    -     530.5 ms
   9: klib/khash             110.227  /  109.832  /  110.385    -     551.1 ms
  10: hashit/chain           111.128  /  108.421  /  112.891    -     555.6 ms
  11: amtl/hashmap           139.048  /  137.119  /  140.270    -     695.2 ms
  12: libcfu/hashtable       137.737  /  136.214  /  140.138    -     688.7 ms
  13: google/c-dense         147.101  /  145.826  /  147.672    -     735.5 ms
  14: std::unordered_map     202.029  /  201.280  /  202.892    -       1.0 s 
  15: mct::closed_hash_map   208.208  /  205.624  /  210.640    -       1.0 s 
  16: google/c-sparse        210.500  /  209.615  /  211.803    -       1.0 s 
  17: mct::linked_hash_map   212.356  /  210.265  /  213.553    -       1.0 s 
  18: ulib::open-hash++      213.921  /  212.978  /  216.418    -       1.0 s 
  19: boost::unordered_map   234.406  /  233.482  /  235.631    -       1.1 s 
  20: rigtorp::hashmap       306.642  /  305.380  /  308.041    -       1.5 s 
  21: hashit/open            389.698  /  386.648  /  398.179    -       1.9 s 
  22: google::densehash      568.759  /  567.785  /  569.552    -       2.8 s 
  23: ulib::chain-hash++     657.500  /  656.643  /  658.892    -       3.2 s 
  24: oddou::hashmap        1364.872  / 1358.887  / 1373.393    -       6.8 s 
  25: google::sparsehash    1362.160  / 1360.176  / 1365.292    -       6.8 s 
  26: hashit/overflow       2186.358  / 2182.547  / 2198.067    -      10.9 s 

Running test [kbench]. Please wait ...
  battle for 26: oddou::hashmap too slow                                    
  battle for 25: google::sparsehash too slow                                    
  battle for 24: ulib::chain-hash++ too slow                                    
  battle for 23: google::densehash too slow                                    
  battle for 22: rigtorp::hashmap too slow                                    
  battle for 21: ulib::open-hash++ too slow                                    
  battle for 20: google/c-sparse too slow                                    
  battle for 19: boost::unordered_map too slow                                    
  battle for 18: mct::linked_hash_map too slow                                    
  battle for 17: mct::closed_hash_map too slow                                    
  battle for 16: std::unordered_map too slow                                    
  battle for 15: hashit/open too slow                                    
  battle for 14: amtl/hashmap too slow                                    
  battle for 13: google/c-dense too slow                                    
  battle for 12: libcfu/hashtable too slow                                    
  battle for 11: ulib/open-hash too slow                                    
  battle for 10: klib/khash too slow                                    
  battle for  9: rdestl::hash_map too slow                                    
  battle for  8: hashit/chain too slow                                    
  battle for  7: hashit/overflow too slow                                    
  battle for  6: python/hashtable too slow                                    
  battle for  5: my-apr/hashtable too slow                                    
  battle for  4: gcc/hashtab too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [kbench] - 1e5 items (5 loops per test)
      Implementation       -   avg         min         max   ms -   elapsed
   1: glib/ghash              22.537  /   22.067  /   22.968    -     112.6 ms
   2: apr/hashtable           26.426  /   25.788  /   26.944    -     132.1 ms
   3: ulib/chain-hash         31.417  /   30.999  /   31.976    -     157.0 ms
   4: gcc/hashtab             32.944  /   32.656  /   33.108    -     164.7 ms
   5: my-apr/hashtable        36.141  /   35.374  /   37.045    -     180.7 ms
   6: python/hashtable        51.411  /   51.258  /   51.906    -     257.0 ms
   7: hashit/overflow         60.050  /   59.430  /   60.611    -     300.2 ms
   8: hashit/chain            63.035  /   62.792  /   63.319    -     315.1 ms
   9: rdestl::hash_map        65.676  /   64.509  /   66.132    -     328.3 ms
  10: klib/khash              68.304  /   67.853  /   68.706    -     341.5 ms
  11: ulib/open-hash          68.468  /   68.108  /   68.786    -     342.3 ms
  12: libcfu/hashtable        98.828  /   98.133  /  100.802    -     494.1 ms
  13: google/c-dense          96.099  /   95.174  /   96.810    -     480.5 ms
  14: amtl/hashmap           100.050  /   97.325  /  102.643    -     500.2 ms
  15: hashit/open            112.824  /  112.478  /  113.116    -     564.1 ms
  16: std::unordered_map     117.642  /  116.916  /  118.253    -     588.2 ms
  17: mct::closed_hash_map   120.993  /  120.350  /  121.752    -     604.9 ms
  18: mct::linked_hash_map   132.173  /  120.498  /  143.145    -     660.8 ms
  19: boost::unordered_map   132.978  /  132.479  /  133.938    -     664.9 ms
  20: google/c-sparse        136.789  /  135.322  /  137.685    -     683.9 ms
  21: ulib::open-hash++      149.610  /  148.596  /  150.602    -     748.0 ms
  22: rigtorp::hashmap       157.773  /  156.792  /  159.096    -     788.8 ms
  23: google::densehash      267.892  /  266.965  /  269.593    -       1.3 s 
  24: ulib::chain-hash++     334.201  /  330.248  /  342.493    -       1.6 s 
  25: google::sparsehash     833.234  /  827.285  /  852.734    -       4.1 s 
  26: oddou::hashmap        1214.133  / 1212.419  / 1217.555    -       6.0 s 
