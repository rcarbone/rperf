Linux nuc 3.2.0-4-amd64 #1 SMP Debian 3.2.88-1 x86_64

Running test [grow]. Please wait ...
  battle for 34: oddou::hashmap too slow                                    
  battle for 33: google::sparsehash too slow                                    
  battle for 32: google::densehash too slow                                    
  battle for 31: ulib::open-hash++ too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: libcfu/hashtable too slow                                    
  battle for 27: mct::closed_hash_map too slow                                    
  battle for 26: boost::unordered_map too slow                                    
  battle for 25: google/c-sparse too slow                                    
  battle for 24: std::unordered_map too slow                                    
  battle for 23: amtl::hashmap too slow                                    
  battle for 22: google/c-dense too slow                                    
  battle for 21: ulib/open-hash too slow                                    
  battle for 20: apr-no-pool/hashtable too slow                                    
  battle for 19: klib/khash too slow                                    
  battle for 18: rdestl::hash_map too slow                                    
  battle for 17: libCDS/HashMap too slow                                    
  battle for 16: clark/hashtable too slow                                    
  battle for 15: python/hashtable too slow                                    
  battle for 14: calg/hashtable too slow                                    
  battle for 13: uthash/hashtable too slow                                    
  battle for 12: hashit/chain too slow                                    
  battle for 11: ulib::chain-hash++ too slow                                    
  battle for 10: Qt::QHash too slow                                    
  battle for  9: apr/hashtable too slow                                    
  battle for  8: hashit/open too slow                                    
  battle for  7: tommyds/linear too slow                                    
  battle for  6: hashit/overflow too slow                                    
  battle for  5: ulib/chain-hash too slow                                    
  battle for  4: tommyds/dynamic too slow                                    
  battle for  3: libevent/ht too slow                                    
  battle for  2: gcc/hashtab too slow                                    
  winner is   1: glib/ghash

Results of test [grow] - 1e5 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash                9.738  /    9.697  /    9.803    -      48.6 ms
   2: gcc/hashtab              11.780  /   11.713  /   11.920    -      58.9 ms
   3: libevent/ht              15.047  /   14.906  /   15.557    -      75.2 ms
   4: tommyds/dynamic          15.437  /   15.333  /   15.751    -      77.1 ms
   5: ulib/chain-hash          19.875  /   19.740  /   20.089    -      99.3 ms
   6: hashit/overflow          21.032  /   20.895  /   21.174    -     105.1 ms
   7: tommyds/linear           22.966  /   22.861  /   23.039    -     114.8 ms
   8: hashit/open              23.644  /   23.456  /   24.001    -     118.2 ms
   9: apr/hashtable            25.294  /   25.131  /   25.440    -     126.4 ms
  10: Qt::QHash                27.331  /   26.823  /   27.866    -     136.6 ms
  11: ulib::chain-hash++       29.002  /   28.417  /   29.455    -     145.0 ms
  12: hashit/chain             30.419  /   30.185  /   30.735    -     152.1 ms
  13: uthash/hashtable         32.983  /   32.835  /   33.147    -     164.9 ms
  14: calg/hashtable           33.790  /   33.610  /   33.914    -     168.9 ms
  15: python/hashtable         33.939  /   33.669  /   34.323    -     169.7 ms
  16: clark/hashtable          34.002  /   33.682  /   34.348    -     170.0 ms
  17: libCDS/HashMap           35.045  /   34.586  /   35.938    -     175.2 ms
  18: rdestl::hash_map         37.411  /   36.479  /   37.735    -     187.0 ms
  19: klib/khash               40.016  /   39.570  /   40.483    -     200.0 ms
  20: apr-no-pool/hashtable    40.548  /   40.183  /   41.082    -     202.7 ms
  21: ulib/open-hash           47.892  /   47.157  /   48.388    -     239.4 ms
  22: google/c-dense           46.822  /   45.763  /   50.594    -     234.1 ms
  23: amtl::hashmap            56.906  /   54.778  /   59.199    -     284.5 ms
  24: std::unordered_map       65.932  /   62.307  /   68.447    -     329.6 ms
  25: google/c-sparse          70.586  /   67.101  /   74.711    -     352.9 ms
  26: boost::unordered_map     74.218  /   73.753  /   74.579    -     371.1 ms
  27: mct::closed_hash_map     78.910  /   76.517  /   81.189    -     394.5 ms
  28: libcfu/hashtable         82.713  /   81.475  /   83.811    -     413.5 ms
  29: mct::linked_hash_map     85.306  /   81.637  /   88.017    -     426.5 ms
  30: rigtorp::hashmap         82.073  /   81.921  /   82.380    -     410.3 ms
  31: ulib::open-hash++        97.002  /   96.583  /   98.340    -     485.0 ms
  32: google::densehash       132.757  /  131.464  /  135.490    -     663.7 ms
  33: google::sparsehash      322.051  /  317.941  /  333.393    -       1.6 s 
  34: oddou::hashmap          938.866  /  647.433  / 1116.374    -       4.6 s 

Running test [hit]. Please wait ...
  battle for 34: oddou::hashmap too slow                                    
  battle for 33: google::sparsehash too slow                                    
  battle for 32: ulib::chain-hash++ too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: ulib::open-hash++ too slow                                    
  battle for 29: boost::unordered_map too slow                                    
  battle for 28: mct::linked_hash_map too slow                                    
  battle for 27: mct::closed_hash_map too slow                                    
  battle for 26: rigtorp::hashmap too slow                                    
  battle for 25: libcfu/hashtable too slow                                    
  battle for 24: std::unordered_map too slow                                    
  battle for 23: google/c-sparse too slow                                    
  battle for 22: amtl::hashmap too slow                                    
  battle for 21: google/c-dense too slow                                    
  battle for 20: klib/khash too slow                                    
  battle for 19: ulib/open-hash too slow                                    
  battle for 18: hashit/chain too slow                                    
  battle for 17: uthash/hashtable too slow                                    
  battle for 16: Qt::QHash too slow                                    
  battle for 15: clark/hashtable too slow                                    
  battle for 14: rdestl::hash_map too slow                                    
  battle for 13: hashit/open too slow                                    
  battle for 12: apr-no-pool/hashtable too slow                                    
  battle for 11: calg/hashtable too slow                                    
  battle for 10: hashit/overflow too slow                                    
  battle for  9: libCDS/HashMap too slow                                    
  battle for  8: python/hashtable too slow                                    
  battle for  7: tommyds/linear too slow                                    
  battle for  6: apr/hashtable too slow                                    
  battle for  5: libevent/ht too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: tommyds/dynamic too slow                                    
  winner is   1: glib/ghash

Results of test [hit] - 1e5 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash               16.457  /   15.946  /   17.214    -      82.2 ms
   2: tommyds/dynamic          26.163  /   25.916  /   26.697    -     130.8 ms
   3: gcc/hashtab              26.617  /   26.344  /   27.468    -     133.0 ms
   4: ulib/chain-hash          27.532  /   26.693  /   28.035    -     137.6 ms
   5: libevent/ht              28.220  /   27.639  /   29.215    -     141.1 ms
   6: apr/hashtable            33.133  /   32.616  /   33.940    -     165.6 ms
   7: tommyds/linear           37.273  /   37.012  /   37.751    -     186.3 ms
   8: python/hashtable         42.419  /   41.748  /   42.956    -     212.1 ms
   9: libCDS/HashMap           43.720  /   42.961  /   44.772    -     218.6 ms
  10: hashit/overflow          44.083  /   43.774  /   44.771    -     220.4 ms
  11: calg/hashtable           46.363  /   45.225  /   47.038    -     231.8 ms
  12: apr-no-pool/hashtable    49.524  /   48.835  /   50.457    -     247.6 ms
  13: hashit/open              49.910  /   49.564  /   50.156    -     249.5 ms
  14: rdestl::hash_map         53.424  /   51.880  /   54.002    -     267.1 ms
  15: clark/hashtable          56.217  /   55.829  /   57.234    -     281.1 ms
  16: Qt::QHash                57.938  /   57.486  /   58.592    -     289.7 ms
  17: uthash/hashtable         56.688  /   56.170  /   57.008    -     283.4 ms
  18: hashit/chain             61.384  /   60.818  /   62.002    -     306.9 ms
  19: ulib/open-hash           63.131  /   62.716  /   63.412    -     315.6 ms
  20: klib/khash               60.365  /   60.106  /   60.499    -     301.8 ms
  21: google/c-dense           64.821  /   63.419  /   65.625    -     324.1 ms
  22: amtl::hashmap            75.399  /   74.560  /   76.534    -     377.0 ms
  23: google/c-sparse          87.012  /   85.498  /   88.548    -     435.0 ms
  24: std::unordered_map       94.043  /   93.621  /   94.663    -     470.2 ms
  25: libcfu/hashtable        106.431  /  106.014  /  106.610    -     532.1 ms
  26: rigtorp::hashmap        110.589  /  108.935  /  111.398    -     552.9 ms
  27: mct::closed_hash_map    103.077  /  101.753  /  107.165    -     515.4 ms
  28: mct::linked_hash_map    114.177  /  104.783  /  129.758    -     570.9 ms
  29: boost::unordered_map    113.532  /  112.008  /  114.692    -     567.6 ms
  30: ulib::open-hash++       130.170  /  126.861  /  134.429    -     650.8 ms
  31: google::densehash       185.216  /  180.738  /  196.768    -     926.0 ms
  32: ulib::chain-hash++      256.203  /  254.404  /  257.408    -       1.2 s 
  33: google::sparsehash      495.011  /  494.703  /  495.398    -       2.4 s 
  34: oddou::hashmap          711.783  /  711.425  /  712.080    -       3.5 s 

Running test [miss]. Please wait ...
  battle for 34: oddou::hashmap too slow                                    
  battle for 33: google::sparsehash too slow                                    
  battle for 32: google::densehash too slow                                    
  battle for 31: boost::unordered_map too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: mct::linked_hash_map too slow                                    
  battle for 28: mct::closed_hash_map too slow                                    
  battle for 27: ulib::open-hash++ too slow                                    
  battle for 26: libcfu/hashtable too slow                                    
  battle for 25: std::unordered_map too slow                                    
  battle for 24: google/c-sparse too slow                                    
  battle for 23: klib/khash too slow                                    
  battle for 22: amtl::hashmap too slow                                    
  battle for 21: hashit/open too slow                                    
  battle for 20: google/c-dense too slow                                    
  battle for 19: ulib/open-hash too slow                                    
  battle for 18: uthash/hashtable too slow                                    
  battle for 17: hashit/chain too slow                                    
  battle for 16: rdestl::hash_map too slow                                    
  battle for 15: clark/hashtable too slow                                    
  battle for 14: Qt::QHash too slow                                    
  battle for 13: apr-no-pool/hashtable too slow                                    
  battle for 12: hashit/overflow too slow                                    
  battle for 11: libCDS/HashMap too slow                                    
  battle for 10: calg/hashtable too slow                                    
  battle for  9: python/hashtable too slow                                    
  battle for  8: tommyds/linear too slow                                    
  battle for  7: apr/hashtable too slow                                    
  battle for  6: libevent/ht too slow                                    
  battle for  5: ulib::chain-hash++ too slow                                    
  battle for  4: gcc/hashtab too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: tommyds/dynamic too slow                                    
  winner is   1: glib/ghash

Results of test [miss] - 1e5 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash               18.279  /   18.134  /   18.390    -      91.4 ms
   2: tommyds/dynamic          27.376  /   27.079  /   27.565    -     136.8 ms
   3: ulib/chain-hash          31.042  /   30.870  /   31.207    -     155.2 ms
   4: gcc/hashtab              30.642  /   30.557  /   30.731    -     153.2 ms
   5: ulib::chain-hash++       31.757  /   31.049  /   33.195    -     158.7 ms
   6: libevent/ht              30.953  /   30.796  /   31.141    -     154.7 ms
   7: apr/hashtable            33.484  /   33.089  /   34.034    -     167.4 ms
   8: tommyds/linear           38.877  /   38.552  /   39.298    -     194.3 ms
   9: python/hashtable         41.919  /   41.576  /   42.639    -     209.6 ms
  10: calg/hashtable           45.149  /   44.805  /   45.607    -     225.7 ms
  11: libCDS/HashMap           46.221  /   46.059  /   46.388    -     231.1 ms
  12: hashit/overflow          46.899  /   46.647  /   47.323    -     234.5 ms
  13: apr-no-pool/hashtable    50.433  /   50.140  /   51.114    -     252.1 ms
  14: Qt::QHash                54.018  /   53.083  /   55.952    -     270.1 ms
  15: clark/hashtable          55.147  /   53.206  /   56.197    -     275.7 ms
  16: rdestl::hash_map         54.648  /   53.385  /   55.455    -     273.2 ms
  17: hashit/chain             59.084  /   57.320  /   60.999    -     295.4 ms
  18: uthash/hashtable         60.438  /   59.499  /   61.567    -     302.2 ms
  19: ulib/open-hash           61.474  /   60.937  /   62.498    -     307.3 ms
  20: google/c-dense           65.793  /   64.910  /   66.274    -     328.9 ms
  21: hashit/open              70.655  /   70.288  /   71.521    -     353.2 ms
  22: amtl::hashmap            76.984  /   75.533  /   77.811    -     384.9 ms
  23: klib/khash               83.657  /   83.575  /   83.831    -     418.2 ms
  24: google/c-sparse          87.547  /   86.580  /   89.288    -     437.7 ms
  25: std::unordered_map       93.220  /   93.068  /   93.369    -     466.1 ms
  26: libcfu/hashtable         94.288  /   93.736  /   94.878    -     471.4 ms
  27: ulib::open-hash++        98.552  /   98.194  /   99.187    -     492.7 ms
  28: mct::closed_hash_map    107.407  /  107.101  /  107.652    -     537.0 ms
  29: mct::linked_hash_map    114.560  /  111.812  /  115.697    -     572.8 ms
  30: rigtorp::hashmap        115.689  /  115.550  /  115.970    -     578.4 ms
  31: boost::unordered_map    117.688  /  117.366  /  118.075    -     588.4 ms
  32: google::densehash       162.786  /  161.632  /  164.340    -     813.9 ms
  33: google::sparsehash      483.174  /  481.043  /  486.626    -       2.4 s 
  34: oddou::hashmap          759.220  /  756.933  /  762.005    -       3.7 s 

Running test [delete]. Please wait ...
  battle for 34: oddou::hashmap too slow                                    
  battle for 33: google::sparsehash too slow                                    
  battle for 32: ulib::chain-hash++ too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: google/c-sparse too slow                                    
  battle for 28: boost::unordered_map too slow                                    
  battle for 27: mct::closed_hash_map too slow                                    
  battle for 26: mct::linked_hash_map too slow                                    
  battle for 25: hashit/open too slow                                    
  battle for 24: std::unordered_map too slow                                    
  battle for 23: libcfu/hashtable too slow                                    
  battle for 22: google/c-dense too slow                                    
  battle for 21: amtl::hashmap too slow                                    
  battle for 20: ulib/open-hash too slow                                    
  battle for 19: uthash/hashtable too slow                                    
  battle for 18: klib/khash too slow                                    
  battle for 17: clark/hashtable too slow                                    
  battle for 16: ulib::open-hash++ too slow                                    
  battle for 15: rdestl::hash_map too slow                                    
  battle for 14: Qt::QHash too slow                                    
  battle for 13: tommyds/linear too slow                                    
  battle for 12: python/hashtable too slow                                    
  battle for 11: hashit/chain too slow                                    
  battle for 10: hashit/overflow too slow                                    
  battle for  9: calg/hashtable too slow                                    
  battle for  8: libCDS/HashMap too slow                                    
  battle for  7: libevent/ht too slow                                    
  battle for  6: tommyds/dynamic too slow                                    
  battle for  5: apr-no-pool/hashtable too slow                                    
  battle for  4: ulib/chain-hash too slow                                    
  battle for  3: gcc/hashtab too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [delete] - 1e5 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash               17.574  /   16.951  /   17.905    -      87.8 ms
   2: apr/hashtable            21.266  /   20.788  /   22.002    -     106.3 ms
   3: gcc/hashtab              24.024  /   23.833  /   24.176    -     120.1 ms
   4: ulib/chain-hash          24.746  /   24.478  /   24.941    -     123.7 ms
   5: apr-no-pool/hashtable    30.282  /   29.866  /   30.523    -     151.4 ms
   6: tommyds/dynamic          34.304  /   33.501  /   35.452    -     171.5 ms
   7: libevent/ht              35.381  /   34.412  /   35.811    -     176.9 ms
   8: libCDS/HashMap           41.204  /   40.273  /   42.416    -     206.0 ms
   9: calg/hashtable           42.798  /   42.242  /   43.655    -     214.0 ms
  10: hashit/overflow          42.687  /   41.987  /   43.641    -     213.4 ms
  11: hashit/chain             44.516  /   42.393  /   46.632    -     222.5 ms
  12: python/hashtable         45.474  /   44.263  /   46.015    -     227.3 ms
  13: tommyds/linear           48.029  /   47.657  /   48.608    -     240.1 ms
  14: Qt::QHash                49.996  /   49.344  /   50.518    -     249.9 ms
  15: rdestl::hash_map         49.193  /   48.272  /   50.393    -     245.9 ms
  16: ulib::open-hash++        49.779  /   49.442  /   50.128    -     248.9 ms
  17: clark/hashtable          49.913  /   48.596  /   51.281    -     249.5 ms
  18: klib/khash               51.617  /   51.119  /   52.476    -     258.1 ms
  19: uthash/hashtable         57.335  /   56.398  /   58.103    -     286.6 ms
  20: ulib/open-hash           58.142  /   57.497  /   59.052    -     290.7 ms
  21: amtl::hashmap            79.100  /   78.629  /   79.402    -     395.5 ms
  22: google/c-dense           82.631  /   81.914  /   83.229    -     413.1 ms
  23: libcfu/hashtable         92.335  /   90.562  /   94.539    -     461.6 ms
  24: std::unordered_map       94.144  /   93.499  /   95.246    -     470.7 ms
  25: hashit/open              94.862  /   93.163  /   96.357    -     474.3 ms
  26: mct::linked_hash_map     98.514  /   98.119  /   98.816    -     492.5 ms
  27: mct::closed_hash_map    101.661  /  101.319  /  102.120    -     508.3 ms
  28: boost::unordered_map    106.372  /  105.502  /  107.575    -     531.8 ms
  29: google/c-sparse         118.107  /  117.105  /  120.044    -     590.5 ms
  30: rigtorp::hashmap        138.060  /  137.062  /  138.547    -     690.3 ms
  31: google::densehash       205.315  /  204.903  /  205.952    -       1.0 s 
  32: ulib::chain-hash++      217.832  /  208.190  /  231.690    -       1.0 s 
  33: google::sparsehash      578.102  /  576.650  /  580.050    -       2.8 s 
  34: oddou::hashmap         1082.096  / 1073.085  / 1090.995    -       5.4 s 

Running test [replace]. Please wait ...
  battle for 34: hashit/overflow too slow                                    
  battle for 33: google::sparsehash too slow                                    
  battle for 32: oddou::hashmap too slow                                    
  battle for 31: ulib::chain-hash++ too slow                                    
  battle for 30: google::densehash too slow                                    
  battle for 29: hashit/open too slow                                    
  battle for 28: rigtorp::hashmap too slow                                    
  battle for 27: boost::unordered_map too slow                                    
  battle for 26: google/c-sparse too slow                                    
  battle for 25: mct::linked_hash_map too slow                                    
  battle for 24: mct::closed_hash_map too slow                                    
  battle for 23: ulib::open-hash++ too slow                                    
  battle for 22: std::unordered_map too slow                                    
  battle for 21: google/c-dense too slow                                    
  battle for 20: libcfu/hashtable too slow                                    
  battle for 19: amtl::hashmap too slow                                    
  battle for 18: uthash/hashtable too slow                                    
  battle for 17: klib/khash too slow                                    
  battle for 16: rdestl::hash_map too slow                                    
  battle for 15: ulib/open-hash too slow                                    
  battle for 14: hashit/chain too slow                                    
  battle for 13: clark/hashtable too slow                                    
  battle for 12: Qt::QHash too slow                                    
  battle for 11: tommyds/linear too slow                                    
  battle for 10: apr-no-pool/hashtable too slow                                    
  battle for  9: calg/hashtable too slow                                    
  battle for  8: libCDS/HashMap too slow                                    
  battle for  7: python/hashtable too slow                                    
  battle for  6: ulib/chain-hash too slow                                    
  battle for  5: libevent/ht too slow                                    
  battle for  4: gcc/hashtab too slow                                    
  battle for  3: tommyds/dynamic too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [replace] - 1e5 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash               41.148  /   40.953  /   41.741    -     205.7 ms
   2: apr/hashtable            46.857  /   46.736  /   46.964    -     234.2 ms
   3: tommyds/dynamic          51.356  /   51.279  /   51.434    -     256.7 ms
   4: gcc/hashtab              61.686  /   61.590  /   61.904    -     308.4 ms
   5: libevent/ht              64.026  /   63.888  /   64.226    -     320.1 ms
   6: ulib/chain-hash          65.330  /   65.000  /   65.663    -     326.6 ms
   7: python/hashtable         65.798  /   65.726  /   65.843    -     329.0 ms
   8: libCDS/HashMap           66.136  /   65.855  /   66.437    -     330.6 ms
   9: calg/hashtable           68.381  /   68.098  /   68.754    -     341.9 ms
  10: apr-no-pool/hashtable    69.018  /   68.945  /   69.127    -     345.1 ms
  11: tommyds/linear           71.106  /   71.031  /   71.194    -     355.5 ms
  12: Qt::QHash                86.215  /   86.043  /   86.531    -     431.0 ms
  13: clark/hashtable          90.896  /   90.048  /   92.873    -     454.4 ms
  14: hashit/chain             95.486  /   95.093  /   96.138    -     477.4 ms
  15: ulib/open-hash           98.082  /   98.010  /   98.216    -     490.4 ms
  16: rdestl::hash_map         99.867  /   96.999  /  106.387    -     499.3 ms
  17: klib/khash               99.782  /   99.533  /  100.429    -     498.9 ms
  18: uthash/hashtable        101.346  /  101.155  /  101.723    -     506.7 ms
  19: amtl::hashmap           129.141  /  128.094  /  129.542    -     645.7 ms
  20: libcfu/hashtable        129.959  /  129.225  /  131.629    -     649.8 ms
  21: google/c-dense          135.464  /  133.882  /  136.737    -     677.3 ms
  22: std::unordered_map      188.720  /  187.811  /  190.238    -     943.6 ms
  23: ulib::open-hash++       197.771  /  197.224  /  198.485    -     988.8 ms
  24: mct::closed_hash_map    197.106  /  196.874  /  197.261    -     985.5 ms
  25: mct::linked_hash_map    199.816  /  196.635  /  202.368    -     999.0 ms
  26: google/c-sparse         201.756  /  201.415  /  202.143    -       1.0 s 
  27: boost::unordered_map    223.252  /  223.001  /  223.571    -       1.1 s 
  28: rigtorp::hashmap        280.157  /  279.489  /  280.535    -       1.4 s 
  29: hashit/open             366.153  /  364.859  /  367.222    -       1.8 s 
  30: google::densehash       543.455  /  537.304  /  562.868    -       2.7 s 
  31: ulib::chain-hash++      748.148  /  713.101  /  810.811    -       3.7 s 
  32: oddou::hashmap         1370.817  / 1369.847  / 1372.973    -       6.8 s 
  33: google::sparsehash     1343.425  / 1342.766  / 1344.220    -       6.7 s 
  34: hashit/overflow        2143.355  / 2135.593  / 2152.846    -      10.7 s 

Running test [kbench]. Please wait ...
  battle for 34: oddou::hashmap too slow                                    
  battle for 33: google::sparsehash too slow                                    
  battle for 32: ulib::chain-hash++ too slow                                    
  battle for 31: google::densehash too slow                                    
  battle for 30: rigtorp::hashmap too slow                                    
  battle for 29: ulib::open-hash++ too slow                                    
  battle for 28: google/c-sparse too slow                                    
  battle for 27: boost::unordered_map too slow                                    
  battle for 26: mct::linked_hash_map too slow                                    
  battle for 25: mct::closed_hash_map too slow                                    
  battle for 24: std::unordered_map too slow                                    
  battle for 23: hashit/open too slow                                    
  battle for 22: google/c-dense too slow                                    
  battle for 21: libcfu/hashtable too slow                                    
  battle for 20: amtl::hashmap too slow                                    
  battle for 19: uthash/hashtable too slow                                    
  battle for 18: ulib/open-hash too slow                                    
  battle for 17: rdestl::hash_map too slow                                    
  battle for 16: klib/khash too slow                                    
  battle for 15: Qt::QHash too slow                                    
  battle for 14: clark/hashtable too slow                                    
  battle for 13: tommyds/linear too slow                                    
  battle for 12: hashit/chain too slow                                    
  battle for 11: hashit/overflow too slow                                    
  battle for 10: python/hashtable too slow                                    
  battle for  9: calg/hashtable too slow                                    
  battle for  8: libCDS/HashMap too slow                                    
  battle for  7: libevent/ht too slow                                    
  battle for  6: tommyds/dynamic too slow                                    
  battle for  5: apr-no-pool/hashtable too slow                                    
  battle for  4: gcc/hashtab too slow                                    
  battle for  3: ulib/chain-hash too slow                                    
  battle for  2: apr/hashtable too slow                                    
  winner is   1: glib/ghash

Results of test [kbench] - 1e5 items (5 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: glib/ghash               30.768  /   28.757  /   31.801    -     153.8 ms
   2: apr/hashtable            38.735  /   36.650  /   40.797    -     193.7 ms
   3: ulib/chain-hash          27.676  /   27.578  /   27.783    -     138.3 ms
   4: gcc/hashtab              29.554  /   29.203  /   30.680    -     147.7 ms
   5: apr-no-pool/hashtable    33.520  /   33.344  /   33.793    -     167.6 ms
   6: tommyds/dynamic          50.215  /   46.870  /   54.735    -     251.0 ms
   7: libevent/ht              41.146  /   41.000  /   41.440    -     205.7 ms
   8: libCDS/HashMap           44.380  /   44.296  /   44.548    -     221.9 ms
   9: calg/hashtable           46.564  /   44.865  /   52.599    -     232.8 ms
  10: python/hashtable         59.747  /   51.882  /   72.859    -     298.7 ms
  11: hashit/overflow          55.552  /   54.704  /   56.454    -     277.7 ms
  12: hashit/chain             57.778  /   56.696  /   58.675    -     288.9 ms
  13: tommyds/linear           59.737  /   58.605  /   60.696    -     298.7 ms
  14: clark/hashtable          59.275  /   58.724  /   60.210    -     296.3 ms
  15: Qt::QHash                64.133  /   61.878  /   68.912    -     320.6 ms
  16: klib/khash               64.456  /   63.697  /   65.493    -     322.2 ms
  17: rdestl::hash_map         63.737  /   62.844  /   64.882    -     318.7 ms
  18: ulib/open-hash           67.189  /   66.303  /   67.725    -     335.9 ms
  19: uthash/hashtable         69.343  /   68.748  /   69.970    -     346.7 ms
  20: amtl::hashmap            98.656  /   97.003  /   99.657    -     493.2 ms
  21: libcfu/hashtable        100.581  /  100.060  /  102.130    -     502.9 ms
  22: google/c-dense          105.210  /  103.007  /  109.545    -     526.0 ms
  23: hashit/open             112.827  /  112.644  /  113.140    -     564.1 ms
  24: std::unordered_map      117.675  /  115.868  /  122.195    -     588.3 ms
  25: mct::closed_hash_map    122.548  /  121.531  /  123.030    -     612.7 ms
  26: mct::linked_hash_map    127.144  /  123.007  /  128.883    -     635.7 ms
  27: boost::unordered_map    138.166  /  134.057  /  140.384    -     690.8 ms
  28: google/c-sparse         140.549  /  140.206  /  140.903    -     702.7 ms
  29: ulib::open-hash++       138.380  /  137.928  /  140.020    -     691.9 ms
  30: rigtorp::hashmap        139.395  /  139.057  /  139.866    -     696.9 ms
  31: google::densehash       251.873  /  251.397  /  252.734    -       1.2 s 
  32: ulib::chain-hash++      284.302  /  282.232  /  287.977    -       1.4 s 
  33: google::sparsehash      774.321  /  773.296  /  775.701    -       3.8 s 
  34: oddou::hashmap         1140.359  / 1139.124  / 1142.414    -       5.7 s 
