 [rperf] is both:
    [rspeed]   a speed program to execute user-defined test scenarios and evaluate/sort avg times elapsed
    [rbattle]  a match race program where user-defined implementations run user-defined test scenarios
               and evaluate which
               in order to determine which performs worse and to exclude it from the match.
               All the remainings start again a new match race until a winner is

 Moreover [rperf] claims to be a development enviroment for hash tables.

 Only the implementations that pass defined functional unit tests are included to be part of the projects
 and can be run with [rspeed] and/or [rbattle].

  Up to 6 different test scenarios can be currently run.
  1: grow    (Add items to an empty container)
  2: hit     (Search for existing items      )
  3: miss    (Search for non existing items  )
  4: delete  (Delete existing items          )
  5: replace (Replace existing items         )
  6: kbench  (Delete if found, add otherwise )


#
# Results for the impatients
#
rspeed, ver. 0.1.0 built on Aug  6 2017 12:26:23

Running on  : Linux nuc 3.2.0-4-amd64 #1 SMP Debian 3.2.89-2 x86_64
Current time: Sun Aug  6 18:31:14 2017

Evaluate average wall-time elapsed repeating 10 times the same test each acting with 100000 items


Running each test #10 times each acting with #100000 items
Dataset: unique serial strings keys and generic void pointers as values

[1] Running grow ...... Done! #48 implementations - Total elapsed time  14.0  s
[2] Running hit ....... Done! #48 implementations - Total elapsed time  19.1  s
[3] Running miss ...... Done! #48 implementations - Total elapsed time  23.1  s
[4] Running delete .... Done! #48 implementations - Total elapsed time  21.1  s
[5] Running replace ... Done! #48 implementations - Total elapsed time  43.4  s
[6] Running kbench .... Done! #48 implementations - Total elapsed time  20.2  s


                              F i n a l   E v a l u a t i o n

                                     Position
      Implementation        | mark | grow    | hit     | miss    | delete  | replace | kbench  |
   1: ccan/htable           |  283 |       3 |       1 |       3 |       2 |       1 |       1 |
   2: tommyds/fixed         |  277 |       1 |       3 |       4 |       1 |       4 |       4 |
   3: rdestl::hash_map      |  272 |       7 |       2 |       1 |       5 |       2 |       5 |
   4: gcc/hashtab           |  267 |       2 |       4 |       7 |       3 |       9 |       2 |
   5: tommyds/dynamic       |  255 |       4 |       5 |       5 |       9 |       3 |      13 |
   6: glib/ghash            |  241 |      12 |       9 |      10 |       4 |      11 |       7 |
   7: emilib::HashMap       |  239 |      11 |       8 |       6 |      11 |      10 |       9 |
   8: tommyds/linear        |  233 |       5 |       6 |       9 |      18 |       8 |      15 |
   9: ulib/chain-hash       |  233 |      10 |      16 |      12 |       6 |      14 |       3 |
  10: libevent/ht           |  232 |       6 |      14 |      14 |      12 |       6 |      10 |
  11: google::densehash     |  220 |      14 |       7 |       8 |      14 |      19 |      12 |
  12: amtl::hashmap         |  219 |      15 |      13 |      16 |      10 |       7 |      14 |
  13: libghthash/hashtable  |  212 |      21 |      11 |      11 |      13 |      15 |      11 |
  14: apr/hashtable         |  211 |      17 |      21 |      27 |       7 |       5 |       6 |
  15: Tcl C-API/hashtable   |  196 |       8 |      12 |      15 |      19 |      21 |      23 |
  16: eastl::hashmap        |  178 |      22 |      20 |      18 |      21 |      17 |      18 |
  17: apr-no-pool/hashtable |  175 |      30 |      30 |      25 |       8 |      18 |       8 |
  18: calg/hashtable        |  175 |      23 |      23 |      20 |      17 |      16 |      20 |
  19: hashit/overflow       |  175 |      13 |      10 |      17 |      15 |      48 |      16 |
  20: google/c-dense        |  172 |      16 |      15 |      13 |      30 |      22 |      26 |
  21: Qt::QHash             |  163 |      19 |      18 |      30 |      31 |      12 |      21 |
  22: ulib/open-hash        |  150 |      20 |      29 |      19 |      32 |      20 |      24 |
  23: mct::linked_hash_map  |  145 |      26 |      24 |      22 |      23 |      26 |      28 |
  24: libCDS/HashMap        |  141 |      37 |      35 |      35 |      16 |      13 |      17 |
  25: PeterMoore/st         |  140 |      40 |      19 |      21 |      20 |      32 |      22 |
  26: klib/khash            |  127 |      31 |      32 |      40 |      22 |      23 |      19 |
  27: mct::closed_hash_map  |  125 |      32 |      31 |      26 |      25 |      24 |      31 |
  28: judy/JSL              |  115 |      18 |      26 |      23 |      38 |      37 |      37 |
  29: hashit/open           |  114 |       9 |      17 |      29 |      39 |      46 |      40 |
  30: rigtorp::hashmap      |  111 |      24 |      25 |      37 |      28 |      35 |      34 |
  31: clark/hashtable       |  109 |      38 |      28 |      39 |      24 |      27 |      29 |
  32: std::unordered_map    |  109 |      39 |      22 |      32 |      37 |      28 |      27 |
  33: hashit/chain          |  108 |      25 |      41 |      41 |      29 |      25 |      25 |
  34: uthash/hashtable      |  104 |      28 |      27 |      36 |      33 |      33 |      33 |
  35: redis/dict            |  103 |      34 |      34 |      38 |      26 |      29 |      30 |
  36: klib::khash++         |   99 |      29 |      40 |      28 |      36 |      30 |      32 |
  37: ulib::open-hash++     |   94 |      42 |      37 |      24 |      27 |      31 |      39 |
  38: libdynamic/map        |   91 |      27 |      33 |      31 |      41 |      36 |      35 |
  39: boost::unordered_map  |   81 |      33 |      38 |      33 |      35 |      38 |      36 |
  40: ulib::chain-hash++    |   66 |      35 |      48 |       2 |      48 |      47 |      48 |
  41: ulib/align-hash       |   62 |      36 |      42 |      48 |      34 |      34 |      38 |
  42: google/c-sparse       |   48 |      41 |      45 |      34 |      42 |      42 |      42 |
  43: Python C-API/dict     |   45 |      43 |      39 |      43 |      40 |      41 |      43 |
  44: stb/sdict             |   33 |      46 |      36 |      42 |      46 |      45 |      46 |
  45: oddou::hashmap        |   32 |      45 |      43 |      46 |      44 |      39 |      45 |
  46: libcfu/hashtable      |   28 |      48 |      47 |      47 |      43 |      40 |      41 |
  47: google::sparsehash    |   27 |      44 |      46 |      44 |      45 |      44 |      44 |
  48: tbb::unordered_map    |   21 |      47 |      44 |      45 |      47 |      43 |      47 |


===================================
  Up to 48 C/C++ implementations are currently available for testing.

  Each implementation under test is simply a plugin
  (a shared object to be dynamically loaded/unloaded for the purpose of the tests).


Currently supported implementations
===================================
 ## Library                        Module                Author                                             Filename
  1 Qt Toolkit                     Qt::QHash             The Qt Company Ltd.                                (Qt-QHash.so)
  2 amtl                           amtl::hashmap         David Anderson and AlliedModders LLC               (amtl.so)
  3 Apache apr                     apr-no-pool/hashtable Apache Software Foundation (ASF)                   (apr-2.so)
  4 Apache apr/C API               apr/hashtable         Apache Software Foundation (ASF)                   (apr.so)
  5 Boost C++ Libraries            boost::unordered_map  Jeremy B. Maitin-Shepard and Daniel James          (boost.so)
  6 Google libcash                 google/c-dense        Craig Silverstein                                  (c-densehash.so)
  7 Google libcash                 google/c-sparse       Craig Silverstein                                  (c-sparsehash.so)
  8 C Algorithms                   calg/hashtable        Simon Howard (fraggle@gmail.com)                   (calg.so)
  9 ccan                           ccan/htable           Rusty Russell (rusty@rustcorp.com.au)              (ccan.so)
 10 cwc22                          clark/hashtable       Christopher Clark (christopher.clark@cl.cam.ac.uk) (clark.so)
 11 mct                            mct::closed_hash_map  Paul Pogonyshev (pogonyshev@gmail.net)             (closed-hash-map.so)
 12 Google Hash-Map                google::densehash     Google Inc.                                        (densehash.so)
 13 eastl                          eastl::hashmap        Electronic Arts Inc.                               (eastl.so)
 14 emilib                         emilib::HashMap       Emil Ernerfeldt (emil.ernerfeldt@gmail.com)        (emilib.so)
 15 glib                           glib/ghash            Peter Mattis, Spencer Kimball and Josh MacDonald   (ghash.so)
 16 libghthash                     libghthash/hashtable  Simon Kagstrom (ska@bth.se)                        (ght.so)
 17 hashit                         hashit/chain          David Gomez (david@pleyades.net)                   (hashit-chain.so)
 18 hashit                         hashit/open           David Gomez (david@pleyades.net)                   (hashit-open.so)
 19 hashit                         hashit/overflow       David Gomez (david@pleyades.net)                   (hashit-overflow.so)
 20 GNU libiberty                  gcc/hashtab           Vladimir Makarov (vmakarov@cygnus.com)             (hashtab.so)
 21 judy                           judy/JSL              Doug Baskinks (dougbaskins@yahoo.com)              (judy.so)
 22 klib                           klib::khash++         Heng Li (lh3@me.com)                               (khash++.so)
 23 klib                           klib/khash            Heng Li (lh3@me.com)                               (khash.so)
 24 LibCDS                         libCDS/HashMap        ZongXian Shen (andy.zsshen@gmail.com)              (libCDS.so)
 25 libcfu                         libcfu/hashtable      Don Owens (don@owensnet.com)                       (libcfu.so)
 26 libdynamic                     libdynamic/map        Fredrik Widlund <fredrik.widlund@gmail.com>        (libdynamic.so)
 27 libevent                       libevent/ht           Niels Provos (provos@umich.edu)                    (libevent.so)
 28 mct                            mct::linked_hash_map  Paul Pogonyshev (pogonyshev@gmail.net)             (linked-hash-map.so)
 29 oddou                          oddou::hashmap        Vivien Oddou <x@x.x>                               (oddou.so)
 30 Python C/API                   Python C-API/dict     Guido van Rossum and the Python community          (python.so)
 31 rdestl                         rdestl::hash_map      Maciej Sinilo                                      (rdestl.so)
 32 Redis                          redis/dict            Salvatore Sanfilippo (antirez@gmail.com)           (redis.so)
 33 rigtorp                        rigtorp::hashmap      Erik Rigtorp <erik@rigtorp.se>                     (rigtorp.so)
 34 Google Hash-Map                google::sparsehash    Google Inc.                                        (sparsehash.so)
 35 st                             PeterMoore/st         Peter Moore @ UCB                                  (st.so)
 36 stb                            stb/sdict             Sean T. Barrett (sean@nothings.org)                (stb.so)
 37 Intel Threading Building Block tbb::unordered_map    Intel Corporation                                  (tbb.so)
 38 Tcl C-API                      Tcl C-API/hashtable   John Ousterhout and the Tcl community              (tcl.so)
 39 tommyds                        tommyds/dynamic       Andrea Mazzoleni (amadvance@gmail.com)             (tommy-dyn.so)
 40 tommyds                        tommyds/fixed         Andrea Mazzoleni (amadvance@gmail.com)             (tommy-fix.so)
 41 tommyds                        tommyds/linear        Andrea Mazzoleni (amadvance@gmail.com)             (tommy-lin.so)
 42 ulib                           ulib/align-hash       Zilong Tan (eric.zltan@gmail.com)                  (ulib-align.so)
 43 ulib                           ulib::chain-hash++    Zilong Tan (eric.zltan@gmail.com)                  (ulib-chain++.so)
 44 ulib                           ulib/chain-hash       Zilong Tan (eric.zltan@gmail.com)                  (ulib-chain.so)
 45 ulib                           ulib::open-hash++     Zilong Tan (eric.zltan@gmail.com)                  (ulib-open++.so)
 46 ulib                           ulib/open-hash        Zilong Tan (eric.zltan@gmail.com)                  (ulib-open.so)
 47 GNU C++ Library                std::unordered_map    Silicon Graphics Computer Systems, Inc.            (unordered-map.so)
 48 uthash                         uthash/hashtable      Troy D. Hanson                                     (uthash.so)


[rperf] so includes:
  * librht  - an abstract C library to be mapped over real hash table implementations which is used
              as development enviroment to execuye both preliminary functional and non-funtional
              unit tests over implementations candidates to the battle.

              Defined and supported Keys/Values pairs:
                only (char * keys, void * vals) at the time

  * rspeed  - a performance tool to evaluate/compare/sort time elapsed in execution
              of test scenarios.

  * rbattle - a benchmark tool to evaluate relative ranking in execution of test scenarios
              (it still needs some code cleanup but it is full functional).


          +========+                                +=========+
          | rspeed |                                | rbattle |
          +========+                                +=========+
               Y           rht (virtual API)               Y
   +==================================================================+
   | rht_alloc() rht_set() rht_get() rht_del() rht_count() rht_free() |
   |    |           |         |         |         |           |       |
   |    Y           Y         Y         Y         Y           Y       |
   +==================================================================+
   |  rht_xxx() functions are implemented as wrappers foreach library |
   |    |     |       |         |      |       |     |     |      |   |
   | klib | ulib | libevent | ccan | tommy | glib | gcc | apr | ..... |
   +==================================================================+
   |                       true implementations                       |
   | klib | ulib | libevent | ccan | tommy | glib | gcc | apr | ..... |
   +==================================================================+



How to add an implementation
============================
Please remember that each implementation under test is simply a plugin.
So, go to the implementations/ directory and create a new one with
the name of the implementation.

In this directory copy the following 3 files from an already available implementation:

 1.  Makefile
 2.  README.c
 3.
    a. glue.c (C)
    b. glue.cpp (C++)

and edit these files in order to meet the requirements.

- In file [Makefile] the only required definition to customize should be NAME and optionally
  the CFLAGS and C++FLAGS.

  Do not edit anything below the separator because the Makefile is automatically
  updated when needed.

- In file [README.c] the section to customize is that contains Plugin definitions

- In file [glue.c] / [glue.cpp] must be implemented each function rsuite_xxx() in order to map the
  virtual interface defined in rht.h over the real implementation


When you have done please run in the directory with the new defined implementation
the following commands:
> make       (to compile everything)
> make ut    (to run the unit tests)
> make run   (to run the test suite)
> make x     (to run both units tests and the test suite)
> make leaks (to check for errors and memory leaks)
> make help  (provides you all the available rules)


Please not do forget at the end of the process to add the name of the new directory
in implementations/Makefile.


How to add an unit test
=======================

To be defined


How to add a test scenario
==========================

To be defined
