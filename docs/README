rperf is a non-funtional test development enviroment for hash tables including:

  1. librhash - an abstract C library over real hash table implementations
                Keys/Values (char * keys, void * vals)
  2. rspeed   - a performance tool to evaluate and compare wall-time spent
  3. rbattle  - a benchmark tool to evaluate ranking in test execution

# Results for the impatients
Linux nuc 3.2.0-4-amd64 #1 SMP Debian 3.2.81-1 x86_64 GNU/Linux
Sat Jul  8 06:42:57 CEST 2017
Data sorted by average wall-time spent to run 5 times the same test

Results of test [grow] - 1e5 items (5 loops per test)
      Implementation       -    elapsed   -     avg         min         max   ms
   1: glib/ghash           -      53.0 ms -    10.602  /   10.462  /   11.022
   2: gcc/hashtab          -      66.6 ms -    13.327  /   13.075  /   13.576
   3: ulib/chain-hash      -     104.8 ms -    20.959  /   20.861  /   21.155
   4: hashit/overflow      -     107.5 ms -    21.512  /   20.868  /   22.018
   5: ulib::chain-hash++   -     148.1 ms -    29.628  /   29.479  /   29.886
   6: hashit/open          -     156.7 ms -    31.351  /   29.963  /   33.153
   7: hashit/chain         -     162.0 ms -    32.399  /   32.059  /   32.822
   8: python/hashtable     -     187.1 ms -    37.432  /   33.660  /   39.934
   9: google/c-dense       -     192.2 ms -    38.445  /   38.288  /   38.534
  10: apr/hashtable        -     200.1 ms -    40.028  /   39.929  /   40.269
  11: klib/khash           -     217.3 ms -    43.464  /   42.297  /   43.882
  12: rdestl::hash_map     -     223.3 ms -    44.659  /   37.482  /   49.006
  13: ulib/open-hash       -     232.1 ms -    46.423  /   46.112  /   47.233
  14: std::unordered_map   -     320.1 ms -    64.030  /   63.917  /   64.159
  15: boost::unordered_map -     373.7 ms -    74.740  /   73.815  /   75.414
  16: mct::closed_hash_map -     389.7 ms -    77.942  /   77.609  /   78.110
  17: rigtorp::hashmap     -     410.3 ms -    82.068  /   81.822  /   82.415
  18: mct::linked_hash_map -     421.4 ms -    84.278  /   82.516  /   84.963
  19: libcfu/hashtable     -     422.2 ms -    84.456  /   82.572  /   88.699
  20: google/c-sparse      -     441.3 ms -    88.264  /   84.104  /   92.542
  21: ulib::open-hash++    -     496.7 ms -    99.355  /   96.005  /  105.653
  22: google::densehash    -     652.7 ms -   130.547  /  129.911  /  132.287
  23: google::sparsehash   -       1.6 s  -   331.484  /  321.238  /  359.619
  24: oddou::hashmap       -       4.1 s  -   821.833  /  777.809  /  869.398

Results of test [hit] - 1e5 items (5 loops per test)
      Implementation       -    elapsed   -     avg         min         max   ms
   1: glib/ghash           -     120.7 ms -    24.142  /   20.514  /   26.708
   2: ulib/chain-hash      -     150.8 ms -    30.175  /   29.628  /   30.676
   3: gcc/hashtab          -     151.9 ms -    30.391  /   28.979  /   32.867
   4: hashit/overflow      -     217.7 ms -    43.556  /   42.729  /   44.323
   5: python/hashtable     -     218.4 ms -    43.682  /   43.390  /   44.019
   6: hashit/open          -     258.5 ms -    51.716  /   51.580  /   51.831
   7: google/c-dense       -     289.2 ms -    57.848  /   54.964  /   62.796
   8: hashit/chain         -     289.6 ms -    57.935  /   54.820  /   62.651
   9: rdestl::hash_map     -     392.6 ms -    78.534  /   64.707  /   98.956
  10: klib/khash           -     400.6 ms -    80.124  /   65.501  /  101.198
  11: google/c-sparse      -     402.2 ms -    80.437  /   77.775  /   87.547
  12: ulib/open-hash       -     407.6 ms -    81.525  /   63.597  /   92.669
  13: apr/hashtable        -     413.9 ms -    82.791  /   69.837  /  102.702
  14: libcfu/hashtable     -     559.9 ms -   111.990  /  105.585  /  128.599
  15: mct::linked_hash_map -     593.6 ms -   118.734  /  112.474  /  122.401
  16: mct::closed_hash_map -     688.9 ms -   137.792  /  121.509  /  154.832
  17: std::unordered_map   -     736.4 ms -   147.280  /  140.191  /  155.937
  18: rigtorp::hashmap     -     774.8 ms -   154.968  /  140.914  /  177.548
  19: ulib::open-hash++    -     827.5 ms -   165.505  /  123.771  /  229.928
  20: boost::unordered_map -     902.6 ms -   180.528  /  176.268  /  186.964
  21: google::densehash    -     977.4 ms -   195.476  /  181.724  /  221.876
  22: ulib::chain-hash++   -       1.1 s  -   227.909  /  223.271  /  231.429
  13: google::sparsehash   -       2.7 s  -   546.004  /  501.987  /  582.979
  24: oddou::hashmap       -       4.7 s  -   944.228  /  828.375  / 1029.860

Results of test [miss] - 1e5 items (5 loops per test)
      Implementation       -    elapsed   -     avg         min         max   ms
   1: glib/ghash           -     134.8 ms -    26.964  /   23.510  /   29.656
   2: gcc/hashtab          -     214.7 ms -    42.939  /   38.484  /   47.918
   3: apr/hashtable        -     234.5 ms -    46.910  /   46.817  /   47.072
   4: hashit/overflow      -     239.8 ms -    47.972  /   45.989  /   52.306
   5: rdestl::hash_map     -     252.6 ms -    50.522  /   48.929  /   51.072
   6: python/hashtable     -     322.9 ms -    64.583  /   59.608  /   67.553
   7: hashit/open          -     338.1 ms -    67.634  /   67.156  /   68.071
   8: google/c-dense       -     342.3 ms -    68.468  /   59.496  /   87.125
   9: ulib/open-hash       -     382.0 ms -    76.403  /   63.485  /  107.333
  10: google/c-sparse      -     395.3 ms -    79.063  /   78.601  /   80.290
  11: hashit/chain         -     409.5 ms -    81.904  /   63.527  /   90.272
  12: klib/khash           -     432.0 ms -    86.414  /   86.160  /   86.616
  13: libcfu/hashtable     -     455.8 ms -    91.168  /   90.402  /   93.597
  14: mct::closed_hash_map -     512.6 ms -   102.519  /  102.353  /  102.712
  15: boost::unordered_map -     595.8 ms -   119.176  /  116.006  /  126.004
  16: rigtorp::hashmap     -     768.3 ms -   153.669  /  131.011  /  199.995
  17: ulib/chain-hash      -     148.4 ms -    29.690  /   29.586  /   29.759
  18: ulib::chain-hash++   -     156.1 ms -    31.227  /   31.165  /   31.364
  19: std::unordered_map   -     445.1 ms -    89.036  /   88.749  /   89.307
  20: ulib::open-hash++    -     473.8 ms -    94.771  /   94.363  /   95.383
  21: mct::linked_hash_map -     546.1 ms -   109.227  /  107.872  /  110.037
  22: google::densehash    -       1.0 s  -   218.647  /  188.272  /  247.742
  23: google::sparsehash   -       2.3 s  -   474.003  /  472.608  /  474.953
  24: oddou::hashmap       -       3.8 s  -   763.471  /  750.895  /  811.506

Results of test [delete] - 1e5 items (5 loops per test)
      Implementation       -    elapsed   -     avg         min         max   ms
   1: glib/ghash           -     101.1 ms -    20.217  /   19.675  /   20.887
   2: gcc/hashtab          -     120.7 ms -    24.143  /   23.867  /   24.259
   3: ulib/chain-hash      -     121.0 ms -    24.202  /   24.068  /   24.376
   4: apr/hashtable        -     199.8 ms -    39.971  /   33.875  /   45.336
   5: python/hashtable     -     238.3 ms -    47.663  /   47.558  /   47.935
   6: hashit/overflow      -     241.6 ms -    48.330  /   44.451  /   53.117
   7: hashit/chain         -     250.9 ms -    50.185  /   42.437  /   57.886
   8: rdestl::hash_map     -     269.9 ms -    53.988  /   50.580  /   56.758
   9: ulib/open-hash       -     279.6 ms -    55.921  /   55.384  /   57.838
  10: klib/khash           -     293.0 ms -    58.611  /   53.907  /   75.234
  11: libcfu/hashtable     -     411.6 ms -    82.321  /   79.285  /   85.861
  12: google/c-dense       -     465.7 ms -    93.144  /   76.823  /  110.141
  13: std::unordered_map   -     538.9 ms -   107.789  /   94.693  /  118.088
  14: boost::unordered_map -     555.2 ms -   111.055  /  101.762  /  126.411
  15: ulib::open-hash++    -     575.8 ms -   115.163  /  112.308  /  123.463
  16: google/c-sparse      -     576.5 ms -   115.310  /  107.211  /  136.703
  17: hashit/open          -     582.9 ms -   116.592  /  101.538  /  127.317
  18: mct::closed_hash_map -     618.2 ms -   123.636  /  116.615  /  131.956
  19: mct::linked_hash_map -     649.2 ms -   129.841  /  100.107  /  152.186
  20: rigtorp::hashmap     -     945.9 ms -   189.195  /  166.617  /  208.896
  21: google::densehash    -       1.2 s  -   256.308  /  199.900  /  337.858
  22: ulib::chain-hash++   -       1.4 s  -   295.044  /  192.775  /  366.520
  23: google::sparsehash   -       3.4 s  -   696.667  /  625.997  /  764.544
  24: oddou::hashmap       -       6.1 s  -  1220.684  / 1137.770  / 1283.018

Results of test [replace] - 1e5 items (5 loops per test)
      Implementation       -    elapsed   -     avg         min         max   ms
   1: glib/ghash           -     208.1 ms -    41.629  /   41.437  /   41.861
   2: gcc/hashtab          -     332.4 ms -    66.482  /   65.276  /   68.327
   3: python/hashtable     -     346.6 ms -    69.319  /   68.772  /   71.039
   4: ulib/chain-hash      -     353.9 ms -    70.796  /   70.526  /   71.421
   5: apr/hashtable        -     354.8 ms -    70.967  /   70.278  /   72.561
   6: rdestl::hash_map     -     489.5 ms -    97.908  /   96.076  /   98.598
   7: klib/khash           -     541.8 ms -   108.360  /  108.266  /  108.429
   8: hashit/chain         -     588.6 ms -   117.732  /  101.326  /  138.152
   9: ulib/open-hash       -     591.7 ms -   118.350  /  103.585  /  145.969
  10: google/c-dense       -     695.6 ms -   139.119  /  137.764  /  139.862
  11: google/c-sparse      -     959.4 ms -   191.885  /  191.351  /  192.716
  12: ulib::open-hash++    -     970.6 ms -   194.131  /  193.306  /  196.080
  13: mct::closed_hash_map -       1.0 s  -   200.041  /  199.297  /  200.912
  14: std::unordered_map   -       1.0 s  -   206.223  /  193.294  /  228.336
  15: mct::linked_hash_map -       1.0 s  -   208.837  /  207.328  /  209.471
  16: boost::unordered_map -       1.0 s  -   212.763  /  211.442  /  213.750
  17: rigtorp::hashmap     -       1.4 s  -   289.282  /  288.619  /  290.662
  18: hashit/open          -       1.9 s  -   395.657  /  385.450  /  403.978
  19: google::densehash    -       2.6 s  -   534.092  /  533.267  /  535.516
  20: ulib::chain-hash++   -       4.1 s  -   825.973  /  817.014  /  842.529
  21: oddou::hashmap       -       6.9 s  -  1399.905  / 1298.977  / 1749.219
  22: google::sparsehash   -       8.6 s  -  1720.360  / 1515.066  / 2123.879
  23: hashit/overflow      -      10.3 s  -  2062.600  / 2059.596  / 2071.942

Results of test [chaos] - 1e5 items (5 loops per test)
      Implementation       -    elapsed   -     avg         min         max   ms
   1: glib/ghash           -     103.1 ms -    20.624  /   20.596  /   20.673
   2: ulib/chain-hash      -     149.6 ms -    29.922  /   29.441  /   31.672
   3: gcc/hashtab          -     156.2 ms -    31.238  /   31.019  /   31.385
   4: apr/hashtable        -     169.9 ms -    33.984  /   33.773  /   34.310
   5: python/hashtable     -     250.5 ms -    50.109  /   50.025  /   50.185
   6: hashit/chain         -     261.9 ms -    52.385  /   52.007  /   53.464
   7: hashit/overflow      -     264.9 ms -    52.992  /   52.793  /   53.269
   8: rdestl::hash_map     -     302.3 ms -    60.468  /   60.025  /   60.747
   9: klib/khash           -     320.6 ms -    64.122  /   64.013  /   64.193
  10: ulib/open-hash       -     335.5 ms -    67.110  /   66.950  /   67.246
  11: google/c-dense       -     429.7 ms -    85.954  /   85.866  /   86.105
  12: hashit/open          -     521.9 ms -   104.382  /  104.240  /  104.489
  13: std::unordered_map   -     547.9 ms -   109.590  /  109.403  /  109.804
  14: mct::closed_hash_map -     577.2 ms -   115.448  /  115.288  /  115.570
  15: google/c-sparse      -     598.1 ms -   119.624  /  119.129  /  120.494
  16: mct::linked_hash_map -     605.4 ms -   121.096  /  119.300  /  121.671
  17: boost::unordered_map -     613.0 ms -   122.605  /  122.255  /  122.938
  18: ulib::open-hash++    -     684.4 ms -   136.886  /  135.663  /  138.534
  19: rigtorp::hashmap     -     723.0 ms -   144.607  /  144.443  /  144.864
  20: google::densehash    -       1.2 s  -   250.467  /  250.019  /  251.551
  21: ulib::chain-hash++   -       1.5 s  -   301.683  /  299.504  /  306.262
  22: google::sparsehash   -       3.9 s  -   780.223  /  779.521  /  781.297
  23: oddou::hashmap       -       5.7 s  -  1146.371  / 1144.948  / 1150.614


Currently supported implementations
===================================
 ## Library             Module               Author                                           Filename
  1 Apache apr          apr/hashtable        Apache Software Foundation (ASF)                 (apr.so)
  2 Boost C++ Libraries boost::unordered_map Jeremy B. Maitin-Shepard and Daniel James        (boost.so)
  3 Google libcash      google/c-dense       Craig Silverstein                                (c-densehash.so)
  4 Google libcash      google/c-sparse      Craig Silverstein                                (c-sparsehash.so)
  5 ulib                ulib::chain-hash++   Zilong Tan (eric.zltan@gmail.com)                (chain-hash++.so)
  6 ulib                ulib/chain-hash      Zilong Tan (eric.zltan@gmail.com)                (chain-hash.so)
  7 mct                 mct::closed_hash_map Paul Pogonyshev (pogonyshev@gmail.net)           (closed-hash-map.so)
  8 Google Hash-Map     google::densehash    Google Inc.                                      (densehash.so)
  9 glib                glib/ghash           Peter Mattis, Spencer Kimball and Josh MacDonald (ghash.so)
 10 hashit              hashit/chain         David Gomez (david@pleyades.net)                 (hashit-chain.so)
 11 hashit              hashit/open          David Gomez (david@pleyades.net)                 (hashit-open.so)
 12 hashit              hashit/overflow      David Gomez (david@pleyades.net)                 (hashit-overflow.so)
 13 GNU libiberty       gcc/hashtab          Vladimir Makarov (vmakarov@cygnus.com)           (hashtab.so)
 14 klib                klib/khash           Heng Li (lh3@me.com)                             (khash.so)
 15 libcfu              libcfu/hashtable     Don Owens (don@owensnet.com)                     (libcfu.so)
 16 mct                 mct::linked_hash_map Paul Pogonyshev (pogonyshev@gmail.net)           (linked-hash-map.so)
 17 oddou               oddou::hashmap       Vivien Oddou <x@x.x>                             (oddou.so)
 18 ulib                ulib::open-hash++    Zilong Tan (eric.zltan@gmail.com)                (open-hash++.so)
 19 ulib                ulib/open-hash       Zilong Tan (eric.zltan@gmail.com)                (open-hash.so)
 20 Python              python/hashtable     Don Owens (don@owensnet.com)                     (python.so)
 21 rdestl              rdestl::hash_map     Maciej Sinilo                                    (rdestl.so)
 22 rigtorp             rigtorp::hashmap     Erik Rigtorp <erik@rigtorp.se>                   (rigtorp.so)
 23 Google Hash-Map     google::sparsehash   Google Inc.                                      (sparsehash.so)
 24 GNU C++ Library     std::unordered_map   Silicon Graphics Computer Systems, Inc.          (unordered-map.so)


How to add an implementation
============================
Please remember that each implementation under test is simply a plugin.
So, go to the implementations/ directory and create a new one with
the name of the implementation.

In this directory copy the following 3 files from an already available implementation:

 1. Makefile
 2. README.c
 3. glue.c

and edit these files in order to meet the requirements.

- In file [Makefile] the only required definition to customize should be NAME and optionally
  the CFLAGS and C++FLAGS.

  Do not edit anything below the separator because the Makefile is automatically
  updated when needed.

- In file [README.c] the section to customize is that contains Plugin definitions

- In file [glue.c] must be implemented each function rsuite_xxx() in order to map the
  virtual interface defined in rhash.h over the real implementation


When you have done please run in the directory with the new defined implementation
the following commands:
> make       (to compile everything)
> make run   (to run the testsuite)
> make leaks (to check for errors and memory leaks)

(make help provides you all the available rules)


Please not do forget at the end of the process to add the name of the new directory
in implementations/Makefile.
