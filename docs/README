 [rperf] is both:
    [rspeed]   a speed program to execute user-defined test scenarios and evaluate/sort avg times elapsed
    [rbattle]  a match race program where user-defined implementations run user-defined test scenarios
               and evaluate which
               in order to determine which performs worse and to exclude it from the match.
               All the remainings start again a new match race until a winner is

 Moreover [rperf] claims to be a development enviroment for hash tables.

 Only the implementations that pass defined functional unit tests are included to be part of the projects
 and can be run with [rspeed] and/or [rbattle].

  Up to 6 different test scenarios can be currently run.
  1: grow    (Add items to an empty container)
  2: hit     (Search for existing items      )
  3: miss    (Search for non existing items  )
  4: delete  (Delete existing items          )
  5: replace (Replace existing items         )
  6: kbench  (Delete if found, add otherwise )


#
# Results for the impatients
#
Linux nuc 3.2.0-4-amd64 #1 SMP Debian 3.2.81-1 x86_64 GNU/Linux
Fri Jul 28 16:29:58 CEST 2017

Evaluate elapsed average wall-time repeating 10 times the same test with 100000 items per test

To run #10 times each with #100000 items
[1] Running grow ...... Done! over #41 implementations - Elapsed  23.8  s
[2] Running hit ....... Done! over #41 implementations - Elapsed  33.2  s
[3] Running miss ...... Done! over #41 implementations - Elapsed  31.8  s
[4] Running delete .... Done! over #41 implementations - Elapsed  38.7  s
[5] Running replace ... Done! over #41 implementations - Elapsed   1:21 mm
[6] Running kbench .... Done! over #41 implementations - Elapsed  45.3  s


                              H a l l   o f   F a m e

Results of test [kbench] - 1e5 items (10 loops per test)
      Implementation        -   avg         min         max   ms -   elapsed
   1: ccan/htable              14.607  /   14.569  /   14.667    -     146.0 ms
   2: ulib/chain-hash          15.452  /   15.107  /   15.659    -     154.5 ms
   3: gcc/hashtab              15.979  /   15.898  /   16.210    -     159.8 ms
   4: apr/hashtable            17.201  /   16.920  /   17.467    -     172.0 ms
   5: glib/ghash               18.387  /   18.345  /   18.449    -     183.8 ms
   6: apr-no-pool/hashtable    18.522  /   18.451  /   18.567    -     185.2 ms
   7: rdestl::hash_map         19.969  /   18.487  /   20.372    -     199.7 ms
   8: libevent/ht              19.978  /   19.903  /   20.122    -     199.8 ms
   9: emilib::HashMap          20.211  /   20.123  /   20.303    -     202.1 ms
  10: libghthash/hashtable     20.702  /   20.510  /   21.953    -     207.0 ms
  11: google::densehash        20.947  /   20.800  /   21.166    -     209.4 ms
  12: Qt::QHash                21.673  /   21.534  /   22.275    -     216.7 ms
  13: tommyds/dynamic          21.881  /   21.830  /   21.931    -     218.8 ms
  14: tommyds/linear           23.287  /   23.200  /   23.452    -     232.8 ms
  15: hashit/overflow          23.843  /   23.611  /   24.482    -     238.4 ms
  16: libCDS/HashMap           25.388  /   25.281  /   25.594    -     253.8 ms
  17: amtl::hashmap            25.484  /   24.723  /   25.802    -     254.8 ms
  18: hashit/chain             25.826  /   25.542  /   26.943    -     258.2 ms
  19: eastl::hashmap           26.171  /   26.110  /   26.358    -     261.7 ms
  20: python/hashtable         26.469  /   26.370  /   26.671    -     264.7 ms
  21: calg/hashtable           27.463  /   27.402  /   27.538    -     274.6 ms
  22: PeterMoore/st            27.734  /   27.638  /   27.848    -     277.3 ms
  23: klib/khash               27.950  /   27.734  /   28.343    -     279.5 ms
  24: ulib/open-hash           30.290  /   29.856  /   30.498    -     302.9 ms
  25: google/c-dense           31.159  /   31.039  /   31.370    -     311.6 ms
  26: std::unordered_map       33.779  /   33.636  /   34.147    -     337.8 ms
  27: mct::closed_hash_map     33.847  /   33.669  /   34.316    -     338.4 ms
  28: clark/hashtable          34.650  /   33.847  /   40.264    -     346.5 ms
  29: mct::linked_hash_map     36.443  /   34.396  /   37.774    -     364.4 ms
  30: uthash/hashtable         37.751  /   37.607  /   38.039    -     377.5 ms
  31: rigtorp::hashmap         40.762  /   40.416  /   42.511    -     407.6 ms
  32: boost::unordered_map     41.695  /   41.211  /   43.552    -     416.9 ms
  33: ulib::open-hash++        48.200  /   47.993  /   48.675    -     482.0 ms
  34: hashit/open              53.205  /   52.839  /   53.660    -     532.0 ms
  35: google/c-sparse          65.666  /   65.249  /   67.297    -     656.6 ms
  36: libcfu/hashtable         68.555  /   68.251  /   68.983    -     685.5 ms
  37: google::sparsehash       84.859  /   84.441  /   85.784    -     848.6 ms
  38: oddou::hashmap           88.689  /   88.504  /   89.174    -     886.9 ms
  39: tbb::unordered_map       96.296  /   95.939  /   96.691    -     962.9 ms
  40: stb/sdict               100.005  /   99.409  /  102.186    -       1.0  s
  41: ulib::chain-hash++      285.192  /  271.409  /  302.268    -       2.8  s


===================================
  Up to 41 C/C++ implementations are currently available for testing.

  Each implementation under test is simply a plugin
  (a shared object to be dynamically loaded/unloaded for the purpose of the tests).


Currently supported implementations
===================================
 ## Library                        Module                Author
  1 Qt Toolkit                     Qt::QHash             The Qt Company Ltd.
  2 amtl                           amtl::hashmap         David Anderson and AlliedModders LLC
  3 Apache apr                     apr-no-pool/hashtable Apache Software Foundation (ASF)
  4 Apache apr                     apr/hashtable         Apache Software Foundation (ASF)
  5 Boost C++ Libraries            boost::unordered_map  Jeremy B. Maitin-Shepard and Daniel James
  6 Google libcash                 google/c-dense        Craig Silverstein
  7 Google libcash                 google/c-sparse       Craig Silverstein
  8 C Algorithms                   calg/hashtable        Simon Howard (fraggle@gmail.com)
  9 ccan                           ccan/htable           Rusty Russell (rusty@rustcorp.com.au)
 10 ulib                           ulib::chain-hash++    Zilong Tan (eric.zltan@gmail.com)
 11 ulib                           ulib/chain-hash       Zilong Tan (eric.zltan@gmail.com)
 12 cwc22                          clark/hashtable       Christopher Clark (christopher.clark@cl.cam.ac.uk)
 13 mct                            mct::closed_hash_map  Paul Pogonyshev (pogonyshev@gmail.net)
 14 Google Hash-Map                google::densehash     Google Inc.
 15 eastl                          eastl::hashmap        Electronic Arts Inc.
 16 emilib                         emilib::HashMap       Emil Ernerfeldt (emil.ernerfeldt@gmail.com)
 17 glib                           glib/ghash            Peter Mattis, Spencer Kimball and Josh MacDonald
 18 libghthash                     libghthash/hashtable  Simon Kagstrom (ska@bth.se)
 19 hashit                         hashit/chain          David Gomez (david@pleyades.net)
 20 hashit                         hashit/open           David Gomez (david@pleyades.net)
 21 hashit                         hashit/overflow       David Gomez (david@pleyades.net)
 22 GNU libiberty                  gcc/hashtab           Vladimir Makarov (vmakarov@cygnus.com)
 23 klib                           klib/khash            Heng Li (lh3@me.com)
 24 LibCDS                         libCDS/HashMap        ZongXian Shen (andy.zsshen@gmail.com)
 25 libcfu                         libcfu/hashtable      Don Owens (don@owensnet.com)
 26 libevent                       libevent/ht           Niels Provos (provos@umich.edu)
 27 mct                            mct::linked_hash_map  Paul Pogonyshev (pogonyshev@gmail.net)
 28 oddou                          oddou::hashmap        Vivien Oddou <x@x.x>
 29 ulib                           ulib::open-hash++     Zilong Tan (eric.zltan@gmail.com)
 30 ulib                           ulib/open-hash        Zilong Tan (eric.zltan@gmail.com)
 31 Python                         python/hashtable      Don Owens (don@owensnet.com)
 32 rdestl                         rdestl::hash_map      Maciej Sinilo
 33 rigtorp                        rigtorp::hashmap      Erik Rigtorp <erik@rigtorp.se>
 34 Google Hash-Map                google::sparsehash    Google Inc.
 35 st                             PeterMoore/st         Peter Moore @ UCB
 36 stb                            stb/sdict             Sean T. Barrett (sean@nothings.org)
 37 Intel Threading Building Block tbb::unordered_map    Intel Corporation
 38 tommyds                        tommyds/dynamic       Andrea Mazzoleni (amadvance@gmail.com)
 39 tommyds                        tommyds/linear        Andrea Mazzoleni (amadvance@gmail.com)
 40 GNU C++ Library                std::unordered_map    Silicon Graphics Computer Systems, Inc.
 41 uthash                         uthash/hashtable      Troy D. Hanson


[rperf] so includes:
  * librht  - an abstract C library to be mapped over real hash table implementations which is used
              as development enviroment to execuye both preliminary functional and non-funtional
              unit tests over implementations candidates to the battle.

              Defined and supported Keys/Values pairs:
                only (char * keys, void * vals) at the time

  * rspeed  - a performance tool to evaluate/compare/sort time elapsed in execution
              of test scenarios.

  * rbattle - a benchmark tool to evaluate relative ranking in execution of test scenarios
              (it still needs some code cleanup but it is full functional).


          +========+                                +=========+
          | rspeed |                                | rbattle |
          +========+                                +=========+
               Y           rht (virtual API)               Y
   +==================================================================+
   | rht_alloc() rht_set() rht_get() rht_del() rht_count() rht_free() |
   |    |           |         |         |         |           |       |
   |    Y           Y         Y         Y         Y           Y       |
   +==================================================================+
   |  rht_xxx() functions are implemented as wrappers foreach library |
   |    |     |       |         |      |       |     |     |      |   |
   | klib | ulib | libevent | ccan | tommy | glib | gcc | apr | ..... |
   +==================================================================+
   |                       true implementations                       |
   | klib | ulib | libevent | ccan | tommy | glib | gcc | apr | ..... |
   +==================================================================+



How to add an implementation
============================
Please remember that each implementation under test is simply a plugin.
So, go to the implementations/ directory and create a new one with
the name of the implementation.

In this directory copy the following 3 files from an already available implementation:

 1.  Makefile
 2.  README.c
 3.
    a. glue.c (C)
    b. glue.cpp (C++)

and edit these files in order to meet the requirements.

- In file [Makefile] the only required definition to customize should be NAME and optionally
  the CFLAGS and C++FLAGS.

  Do not edit anything below the separator because the Makefile is automatically
  updated when needed.

- In file [README.c] the section to customize is that contains Plugin definitions

- In file [glue.c] / [glue.cpp] must be implemented each function rsuite_xxx() in order to map the
  virtual interface defined in rht.h over the real implementation


When you have done please run in the directory with the new defined implementation
the following commands:
> make       (to compile everything)
> make ut    (to run the unit tests)
> make run   (to run the test suite)
> make x     (to run both units tests and the test suite)
> make leaks (to check for errors and memory leaks)
> make help  (provides you all the available rules)


Please not do forget at the end of the process to add the name of the new directory
in implementations/Makefile.


How to add an unit test
=======================

To be defined


How to add a test scenario
==========================

To be defined
